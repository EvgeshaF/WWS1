# test_company_manager.py - –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ CompanyManager
# –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ Django shell: python manage.py shell < test_company_manager.py

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'WWS1.settings')
django.setup()

from loguru import logger
from company.company_manager import CompanyManager
from mongodb.mongodb_config import MongoConfig
from mongodb.mongodb_utils import MongoConnection


def test_company_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã CompanyManager"""

    logger.info("=" * 60)
    logger.info("üß™ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï COMPANY MANAGER")
    logger.info("=" * 60)

    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...")
    try:
        db = MongoConnection.get_database()
        if db:
            logger.success(f"‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: OK, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db.name}")
        else:
            logger.error("‚ùå MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: FAILED")
            return
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
        return

    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ CompanyManager
    logger.info("2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º CompanyManager...")
    try:
        company_manager = CompanyManager()
        logger.success("‚úÖ CompanyManager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"üîç Database: {company_manager.db}")
        logger.info(f"üîç Collection name: {company_manager.company_collection_name}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CompanyManager: {e}")
        return

    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    logger.info("3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    try:
        collection = company_manager.get_collection()
        if collection:
            logger.success(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {collection.name}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            existing_collections = db.list_collection_names()
            logger.info(f"üîç –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {existing_collections}")

            if company_manager.company_collection_name in existing_collections:
                logger.success(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {company_manager.company_collection_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                logger.warning(f"‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è {company_manager.company_collection_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é")
            return
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
        return

    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    logger.info("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        documents = list(collection.find({}))
        logger.info(f"üîç –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {len(documents)}")

        # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏
        company_docs = list(collection.find({'type': 'company_info'}))
        logger.info(f"üîç –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ (type: company_info): {len(company_docs)}")

        if company_docs:
            for i, doc in enumerate(company_docs):
                logger.info(f"üîç –î–æ–∫—É–º–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ {i + 1}:")
                logger.info(f"   - _id: {doc.get('_id')}")
                logger.info(f"   - company_name: {doc.get('company_name')}")
                logger.info(f"   - legal_form: {doc.get('legal_form')}")
                logger.info(f"   - created_at: {doc.get('created_at')}")
                logger.info(f"   - modified_at: {doc.get('modified_at')}")
        else:
            logger.warning("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")

    # –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º has_company()
    logger.info("5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º has_company()...")
    try:
        has_company_result = company_manager.has_company()
        logger.info(f"üîç has_company() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {has_company_result}")

        if has_company_result:
            logger.success("‚úÖ has_company(): –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è has_company(): –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ has_company(): {e}")
        has_company_result = False

    # –¢–µ—Å—Ç 6: –¢–µ—Å—Ç–∏—Ä—É–µ–º get_company()
    logger.info("6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º get_company()...")
    try:
        company_data = company_manager.get_company()
        logger.info(f"üîç get_company() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {type(company_data)}")

        if company_data:
            logger.success("‚úÖ get_company(): –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã")
            logger.info(f"üîç –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {company_data.get('company_name')}")
            logger.info(f"üîç –ü—Ä–∞–≤–æ–≤–∞—è —Ñ–æ—Ä–º–∞: {company_data.get('legal_form')}")
            logger.info(f"üîç Email: {company_data.get('email')}")
            logger.info(f"üîç –¢–µ–ª–µ—Ñ–æ–Ω: {company_data.get('phone')}")
        else:
            logger.warning("‚ö†Ô∏è get_company(): –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_company(): {e}")
        company_data = None

    # –¢–µ—Å—Ç 7: –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    logger.info("7Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è...")
    if company_data and not has_company_result:
        logger.error("üö® –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê!")
        logger.error("   get_company() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –Ω–æ has_company() = False")
        logger.error("   –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É –≤ –ª–æ–≥–∏–∫–µ has_company()")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É has_company() –≤—Ä—É—á–Ω—É—é
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É has_company() –≤—Ä—É—á–Ω—É—é...")
        manual_check = collection.find_one({'type': 'company_info'})
        logger.info(f"üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ find_one({{'type': 'company_info'}}): {manual_check is not None}")

        if manual_check:
            logger.error("üö® –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ï–°–¢–¨!")
            logger.error("üö® –ü—Ä–æ–±–ª–µ–º–∞ –≤ –º–µ—Ç–æ–¥–µ has_company() –≤ CompanyManager")

    elif not company_data and has_company_result:
        logger.error("üö® –û–ë–†–ê–¢–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê!")
        logger.error("   has_company() = True, –Ω–æ get_company() –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ")

    elif company_data and has_company_result:
        logger.success("‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ: –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –∏ has_company() = True")

    elif not company_data and not has_company_result:
        logger.info("‚ÑπÔ∏è –ö–æ–º–ø–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")

    # –¢–µ—Å—Ç 8: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not company_data:
        logger.info("8Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é...")
        test_company_data = {
            'company_name': 'Test Company GmbH',
            'legal_form': 'gmbh',
            'email': 'test@company.de',
            'phone': '+49 123 456789',
            'street': 'Teststra√üe 1',
            'postal_code': '12345',
            'city': 'Teststadt',
            'country': 'deutschland'
        }

        try:
            success = company_manager.create_or_update_company(test_company_data)
            if success:
                logger.success("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞")

                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
                logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è...")
                has_company_after = company_manager.has_company()
                company_data_after = company_manager.get_company()

                logger.info(f"üîç –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è has_company(): {has_company_after}")
                logger.info(f"üîç –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è get_company(): {company_data_after is not None}")

                if has_company_after and company_data_after:
                    logger.success("‚úÖ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                else:
                    logger.error("‚ùå –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏: {e}")

    logger.info("=" * 60)
    logger.info("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    logger.info("=" * 60)


if __name__ == "__main__":
    test_company_manager()