# auth/session.py - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

from typing import Dict, Any, Optional
from loguru import logger
import datetime


def create_user_session(request, user_data: Dict[str, Any], remember_me: bool = False) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    Args:
        request: Django request object
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MongoDB
        remember_me: –ó–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è)
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
        request.session["user_authenticated"] = True
        request.session["user_id"] = str(user_data.get("_id"))
        request.session["username"] = user_data.get("username")
        request.session["is_admin"] = user_data.get("is_admin", False)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        request.session["user_data"] = {
            'username': user_data.get('username'),
            'is_admin': user_data.get('is_admin', False),
            'is_active': user_data.get('is_active', True),
            'profile': user_data.get('profile', {}),
            'permissions': user_data.get('permissions', {})
        }

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        request.session["login_timestamp"] = datetime.datetime.now().isoformat()
        request.session["last_activity"] = datetime.datetime.now().isoformat()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏
        if remember_me:
            request.session.set_expiry(1209600)  # 2 –Ω–µ–¥–µ–ª–∏
        else:
            request.session.set_expiry(0)  # –î–æ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞

        request.session.modified = True

        logger.success(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data.get('username')}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        raise


def update_user_session(request, update_data: Dict[str, Any]) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏

    Args:
        request: Django request object
        update_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    try:
        if 'user_data' in request.session:
            request.session['user_data'].update(update_data)
        else:
            request.session['user_data'] = update_data

        request.session["last_activity"] = datetime.datetime.now().isoformat()
        request.session.modified = True

        logger.debug(f"üîÑ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è: {request.session.get('username')}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")


def get_session_data(request, key: str = None) -> Optional[Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏

    Args:
        request: Django request object
        key: –ö–ª—é—á –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ user_data)

    Returns:
        –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None
    """
    try:
        if key:
            return request.session.get(key)
        else:
            return request.session.get('user_data')

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Å—Å–∏–∏: {e}")
        return None


def clear_user_session(request) -> None:
    """
    –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏ (logout)

    Args:
        request: Django request object
    """
    try:
        # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        session_keys = [
            'user_authenticated',
            'user_id',
            'username',
            'is_admin',
            'user_data',
            'login_timestamp',
            'last_activity'
        ]

        for key in session_keys:
            if key in request.session:
                del request.session[key]

        request.session.modified = True
        logger.debug("üßπ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")


def extend_session(request, seconds: int = 1800) -> None:
    """
    –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏

    Args:
        request: Django request object
        seconds: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    """
    try:
        request.session.set_expiry(seconds)
        request.session.modified = True
        logger.debug(f"‚è∞ –°–µ—Å—Å–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {seconds} —Å–µ–∫—É–Ω–¥")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")


def is_session_expired(request, max_inactive_seconds: int = 3600) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

    Args:
        request: Django request object
        max_inactive_seconds: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        True –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞
    """
    try:
        last_activity_str = request.session.get('last_activity')
        if not last_activity_str:
            return True

        last_activity = datetime.datetime.fromisoformat(last_activity_str)
        now = datetime.datetime.now()

        inactive_seconds = (now - last_activity).total_seconds()

        return inactive_seconds > max_inactive_seconds

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        return True


def refresh_session_activity(request) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–µ—Å—Å–∏–∏

    Args:
        request: Django request object
    """
    try:
        request.session["last_activity"] = datetime.datetime.now().isoformat()
        request.session.modified = True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏: {e}")


def get_session_info(request) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏

    Args:
        request: Django request object

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Å—Å–∏–∏
    """
    try:
        login_timestamp_str = request.session.get('login_timestamp')
        last_activity_str = request.session.get('last_activity')

        login_time = None
        last_activity = None
        session_duration = None
        inactive_duration = None

        if login_timestamp_str:
            login_time = datetime.datetime.fromisoformat(login_timestamp_str)
            session_duration = (datetime.datetime.now() - login_time).total_seconds()

        if last_activity_str:
            last_activity = datetime.datetime.fromisoformat(last_activity_str)
            inactive_duration = (datetime.datetime.now() - last_activity).total_seconds()

        return {
            'is_authenticated': request.session.get('user_authenticated', False),
            'username': request.session.get('username'),
            'is_admin': request.session.get('is_admin', False),
            'login_time': login_time,
            'last_activity': last_activity,
            'session_duration_seconds': session_duration,
            'inactive_duration_seconds': inactive_duration,
            'session_key': request.session.session_key
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏: {e}")
        return {}