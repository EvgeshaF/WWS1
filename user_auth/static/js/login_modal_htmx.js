// user_auth/static/js/login_modal_htmx.js - HTMX –≤–µ—Ä—Å–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

(function() {
    'use strict';

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞
    var currentPath = window.location.pathname;
    var isAdminCreationPage = currentPath.includes('/users/create-admin/') ||
                               currentPath.includes('create-admin') ||
                               (window.isAdminCreationPage === true);

    if (isAdminCreationPage) {
        console.log('üö´ Auth Login Modal HTMX System –û–¢–ö–õ–Æ–ß–ï–ù –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', currentPath);
        return;
    }

    console.log('üîê Auth Login Modal HTMX System –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', currentPath);

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const CONFIG = {
        maxAttempts: 5,
        lockoutTime: 15 * 60 * 1000,
        storageKeys: {
            attempts: 'auth_login_attempts',
            lockout: 'auth_login_lockout',
            username: 'auth_login_username'
        }
    };

    class AuthLoginModalHTMX {
        constructor() {
            this.modal = null;
            this.modalInstance = null;
            this.form = null;
            this.usernameInput = null;
            this.passwordInput = null;
            this.togglePasswordBtn = null;
            this.submitBtn = null;
            this.loader = null;
            this.attemptsAlert = null;
            this.currentAttempts = 0;
            this.lockoutInterval = null;

            this.init();
        }

        init() {
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => this.setup());
            } else {
                this.setup();
            }
        }

        setup() {
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Auth Login Modal HTMX');

            this.modal = document.getElementById('authLoginModal');
            if (!this.modal) {
                console.warn('‚ö†Ô∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ #authLoginModal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            this.form = document.getElementById('authLoginForm');
            this.usernameInput = document.getElementById('authUsername');
            this.passwordInput = document.getElementById('authPassword');
            this.togglePasswordBtn = document.getElementById('authTogglePassword');
            this.submitBtn = document.getElementById('authSubmitBtn');
            this.loader = document.getElementById('authModalLoader');
            this.attemptsAlert = document.getElementById('authAttemptsAlert');

            if (!this.form || !this.submitBtn) {
                console.error('‚ùå –§–æ—Ä–º–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }

            this.bindEvents();
            this.checkAuthStatus();
            this.restoreFormData();

            console.log('‚úÖ Auth Login Modal HTMX –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        checkAuthStatus() {
            if (window.isAuthenticated === false && window.requiresAuth === true) {
                setTimeout(() => {
                    this.showModal();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                    if (this.isLockedOut()) {
                        this.showLockoutMessage();
                        this.startLockoutTimer();
                    }
                }, 1000);
            }
        }

        bindEvents() {
            // HTMX —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã
            this.form.addEventListener('htmx:beforeRequest', (e) => {
                console.log('üì§ HTMX: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞');
                if (this.isLockedOut()) {
                    e.preventDefault();
                    this.showLockoutMessage();
                    return;
                }
                this.showLoader();
            });

            this.form.addEventListener('htmx:afterRequest', (e) => {
                console.log('üì• HTMX: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');

                // –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                e.detail.loginHandled = true;
                e.stopImmediatePropagation();

                this.hideLoader();

                try {
                    const response = JSON.parse(e.detail.xhr.response);
                    console.log('üì¶ Parsed login response:', response);

                    if (response.success) {
                        this.handleLoginSuccess(response);
                    } else {
                        this.handleLoginError(response);
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', error);
                }
            });

            this.form.addEventListener('htmx:responseError', (e) => {
                console.error('‚ùå HTMX Response Error:', e.detail);

                // –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ
                e.detail.loginHandled = true;
                e.stopImmediatePropagation();

                this.hideLoader();
                if (window.showToast) {
                    window.showToast('Serverfehler aufgetreten', 'error');
                }
            });

            this.form.addEventListener('htmx:sendError', (e) => {
                console.error('‚ùå HTMX Send Error:', e.detail);

                // –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ
                e.detail.loginHandled = true;
                e.stopImmediatePropagation();

                this.hideLoader();
                if (window.showToast) {
                    window.showToast('Verbindungsfehler', 'error');
                }
            });

            // Toggle password visibility
            if (this.togglePasswordBtn) {
                this.togglePasswordBtn.addEventListener('click', () => this.togglePasswordVisibility());
            }

            // –°–æ–±—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            this.modal.addEventListener('shown.bs.modal', () => {
                if (this.usernameInput && !this.usernameInput.value.trim()) {
                    this.usernameInput.focus();
                } else if (this.passwordInput) {
                    this.passwordInput.focus();
                }
                this.currentAttempts = this.getStoredAttempts();
                this.updateAttemptsDisplay();
            });

            this.modal.addEventListener('hidden.bs.modal', () => {
                this.saveFormData();

                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                if (this.lockoutInterval) {
                    clearInterval(this.lockoutInterval);
                    this.lockoutInterval = null;
                }
            });
        }

        handleLoginSuccess(data) {
            console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥');
            console.log('üìä Login success data:', data);
            console.log('üîó Redirect URL:', data.redirect_url);

            this.clearAttempts();
            this.clearFormData();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –≤—Ä—É—á–Ω—É—é, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º stopImmediatePropagation()
            // –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
            if (data.messages && Array.isArray(data.messages)) {
                console.log('üì¨ Showing messages from array:', data.messages);
                data.messages.forEach(msg => {
                    if (typeof window.showToast === 'function') {
                        window.showToast(msg.text, msg.tags, msg.delay || 5000);
                    }
                });
            } else if (data.message) {
                // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º message –Ω–∞–ø—Ä—è–º—É—é
                console.log('üì¨ Showing message:', data.message);
                if (typeof window.showToast === 'function') {
                    window.showToast(data.message, 'success', 5000);
                }
            }

            this.hideModalWithSuccess();

            console.log('‚è∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ 1500ms');
            setTimeout(() => {
                console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç...');
                if (data.redirect_url) {
                    console.log('‚û°Ô∏è –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } else {
                    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
                    window.location.reload();
                }
            }, 1500);
        }

        handleLoginError(data) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', data.message);

            this.currentAttempts++;
            this.storeAttempts();
            this.updateAttemptsDisplay();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –≤—Ä—É—á–Ω—É—é, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º stopImmediatePropagation()
            // –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
            if (data.messages && Array.isArray(data.messages)) {
                data.messages.forEach(msg => {
                    if (typeof window.showToast === 'function') {
                        window.showToast(msg.text, msg.tags, msg.delay || 5000);
                    }
                });
            } else if (data.message) {
                // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º message –Ω–∞–ø—Ä—è–º—É—é
                if (typeof window.showToast === 'function') {
                    window.showToast(data.message, 'error', 5000);
                }
            }

            if (this.currentAttempts >= CONFIG.maxAttempts) {
                this.setLockout();
                this.showLockoutMessage();
                this.startLockoutTimer();
            }

            if (this.passwordInput) {
                this.passwordInput.value = '';
                this.passwordInput.focus();
            }
        }

        togglePasswordVisibility() {
            if (!this.passwordInput || !this.togglePasswordBtn) return;

            const type = this.passwordInput.type === 'password' ? 'text' : 'password';
            this.passwordInput.type = type;

            const icon = document.getElementById('authPasswordIcon');
            if (icon) {
                icon.className = type === 'password' ? 'bi bi-eye' : 'bi bi-eye-slash';
            }
        }

        showLoader() {
            if (this.loader) {
                this.loader.classList.add('active');
            }

            if (this.submitBtn) {
                this.submitBtn.disabled = true;
                const buttonText = document.getElementById('authButtonText');
                if (buttonText) {
                    buttonText.textContent = 'Anmeldung...';
                }
            }
        }

        hideLoader() {
            if (this.loader) {
                this.loader.classList.remove('active');
            }

            if (this.submitBtn) {
                this.submitBtn.disabled = false;
                const buttonText = document.getElementById('authButtonText');
                if (buttonText) {
                    buttonText.textContent = 'Anmelden';
                }
            }
        }

        showModal() {
            if (this.modal && window.bootstrap) {
                if (!this.modalInstance) {
                    this.modalInstance = new bootstrap.Modal(this.modal, {
                        backdrop: 'static',
                        keyboard: false
                    });
                }
                this.modalInstance.show();
            }
        }

        hideModal() {
            if (this.modalInstance) {
                this.modalInstance.hide();
            }
        }

        hideModalWithSuccess() {
            this.modal.classList.add('login-success');
            setTimeout(() => {
                this.hideModal();
            }, 500);
        }

        // ==================== ATTEMPTS & LOCKOUT ====================

        getStoredAttempts() {
            const stored = localStorage.getItem(CONFIG.storageKeys.attempts);
            const data = stored ? JSON.parse(stored) : {count: 0, timestamp: 0};

            if (Date.now() - data.timestamp > CONFIG.lockoutTime) {
                this.clearAttempts();
                return 0;
            }

            return data.count;
        }

        storeAttempts() {
            const data = {
                count: this.currentAttempts,
                timestamp: Date.now()
            };
            localStorage.setItem(CONFIG.storageKeys.attempts, JSON.stringify(data));
        }

        clearAttempts() {
            this.currentAttempts = 0;
            localStorage.removeItem(CONFIG.storageKeys.attempts);
            localStorage.removeItem(CONFIG.storageKeys.lockout);
        }

        isLockedOut() {
            const lockout = localStorage.getItem(CONFIG.storageKeys.lockout);
            if (!lockout) return false;

            const lockoutTime = parseInt(lockout);
            if (Date.now() < lockoutTime) {
                return true;
            }

            localStorage.removeItem(CONFIG.storageKeys.lockout);
            this.clearAttempts();
            return false;
        }

        setLockout() {
            const lockoutUntil = Date.now() + CONFIG.lockoutTime;
            localStorage.setItem(CONFIG.storageKeys.lockout, lockoutUntil.toString());
        }

        updateAttemptsDisplay() {
            if (!this.attemptsAlert) return;

            if (this.currentAttempts > 0) {
                const remaining = CONFIG.maxAttempts - this.currentAttempts;
                const attemptsText = document.getElementById('authAttemptsText');
                if (attemptsText) {
                    attemptsText.textContent = `Noch ${remaining} Versuche verbleibend`;
                }
                this.attemptsAlert.style.display = 'block';
            } else {
                this.attemptsAlert.style.display = 'none';
            }
        }

        showLockoutMessage() {
            const lockout = localStorage.getItem(CONFIG.storageKeys.lockout);
            if (!lockout) return;

            const lockoutTime = parseInt(lockout);
            const remainingMs = lockoutTime - Date.now();
            const remainingMinutes = Math.ceil(remainingMs / 60000);

            // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º toast - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–º–æ–π —Ñ–æ—Ä–º–µ
            // const message = `Zu viele fehlgeschlagene Anmeldeversuche. Konto f√ºr ${remainingMinutes} Minuten gesperrt.`;

            this.form.style.pointerEvents = 'none';
            this.form.style.opacity = '0.5';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
            if (this.attemptsAlert) {
                const attemptsText = document.getElementById('authAttemptsText');
                if (attemptsText) {
                    attemptsText.innerHTML = `<strong>Konto gesperrt.</strong> Versuchen Sie es erneut in: <span id="lockoutTimer"></span>`;
                }
                this.attemptsAlert.classList.remove('alert-warning');
                this.attemptsAlert.classList.add('alert-danger');
                this.attemptsAlert.style.display = 'block';
            }
        }

        startLockoutTimer() {
            const timerElement = document.getElementById('lockoutTimer');
            if (!timerElement) return;

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.lockoutInterval) {
                clearInterval(this.lockoutInterval);
            }

            const updateTimer = () => {
                const lockout = localStorage.getItem(CONFIG.storageKeys.lockout);
                if (!lockout) {
                    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞
                    this.clearLockoutDisplay();
                    return;
                }

                const lockoutTime = parseInt(lockout);
                const remainingMs = lockoutTime - Date.now();

                if (remainingMs <= 0) {
                    // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
                    this.clearLockoutDisplay();
                    this.clearAttempts();
                    return;
                }

                const minutes = Math.floor(remainingMs / 60000);
                const seconds = Math.floor((remainingMs % 60000) / 1000);
                timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            };

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É
            updateTimer();

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            this.lockoutInterval = setInterval(updateTimer, 1000);
        }

        clearLockoutDisplay() {
            if (this.lockoutInterval) {
                clearInterval(this.lockoutInterval);
                this.lockoutInterval = null;
            }

            if (this.attemptsAlert) {
                this.attemptsAlert.classList.remove('alert-danger');
                this.attemptsAlert.classList.add('alert-warning');
                this.attemptsAlert.style.display = 'none';
            }

            this.form.style.pointerEvents = '';
            this.form.style.opacity = '';

            // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º toast - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç —ç—Ç–æ –ø–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ñ–æ—Ä–º–µ

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫
            this.currentAttempts = 0;
            this.updateAttemptsDisplay();
        }

        // ==================== STORAGE ====================

        saveFormData() {
            const rememberMe = document.getElementById('authRememberMe');
            if (!rememberMe || !rememberMe.checked) return;

            const username = this.usernameInput.value;
            if (username) {
                localStorage.setItem(CONFIG.storageKeys.username, username);
            }
        }

        restoreFormData() {
            const savedUsername = localStorage.getItem(CONFIG.storageKeys.username);
            if (savedUsername && this.usernameInput) {
                this.usernameInput.value = savedUsername;
                const rememberCheckbox = document.getElementById('authRememberMe');
                if (rememberCheckbox) {
                    rememberCheckbox.checked = true;
                }
            }
        }

        clearFormData() {
            localStorage.removeItem(CONFIG.storageKeys.username);
        }
    }

    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if (!isAdminCreationPage) {
        window.authLoginModal = new AuthLoginModalHTMX();

        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        window.showAuthLoginModal = function() {
            if (window.authLoginModal) {
                window.authLoginModal.showModal();
            }
        };

        window.hideAuthLoginModal = function() {
            if (window.authLoginModal) {
                window.authLoginModal.hideModal();
            }
        };

        console.log('‚úÖ Auth Login Modal HTMX System –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    }

})();
