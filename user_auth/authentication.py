# WWS1/auth/authentication.py - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

from typing import Optional, Dict, Any, Tuple
from loguru import logger
from django.contrib.auth.hashers import check_password
import datetime

from users.user_utils import UserManager


def authenticate_user(username: str, password: str) -> Optional[Dict[str, Any]]:
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏ –ø–∞—Ä–æ–ª—é

    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password: –ü–∞—Ä–æ–ª—å

    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None

    Example:
        >>> user = authenticate_user('admin', 'password123')
        >>> if user:
        >>>     print(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {user['username']}")
    """
    try:
        logger.info(f"üîë –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {username}")

        user_manager = UserManager()
        user = user_manager.find_user_by_username(username)

        if not user:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        if not user.get('is_active', False):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        locked_until = user.get('locked_until')
        if locked_until and locked_until > datetime.datetime.now():
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {locked_until}")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        stored_password = user.get('password')
        if not stored_password:
            logger.error(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–æ–ª—å")
            return None

        if check_password(password, stored_password):
            _update_login_success(username)
            logger.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return user
        else:
            _update_login_failure(username)
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è '{username}'")
            return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ '{username}': {e}")
        return None


def is_user_authenticated(request) -> Tuple[bool, Optional[Dict[str, Any]]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏

    Args:
        request: Django request object

    Returns:
        Tuple (is_authenticated: bool, user_data: dict or None)

    Example:
        >>> is_auth, user_data = is_user_authenticated(request)
        >>> if is_auth:
        >>>     print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']}")
    """
    try:
        user_authenticated = request.session.get('user_authenticated', False)

        if not user_authenticated:
            return False, None

        username = request.session.get('username')
        if not username:
            clear_user_session(request)
            return False, None

        user_manager = UserManager()
        user_data = user_manager.find_user_by_username(username)

        if user_data and user_data.get('is_active', False):
            return True, user_data
        else:
            clear_user_session(request)
            return False, None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False, None


def clear_user_session(request) -> None:
    """
    –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏

    Args:
        request: Django request object

    Example:
        >>> clear_user_session(request)
        >>> # –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–∞
    """
    try:
        session_keys = [
            'user_authenticated',
            'user_id',
            'username',
            'is_admin',
            'user_data',
            'login_timestamp',
            'last_activity'
        ]

        for key in session_keys:
            if key in request.session:
                del request.session[key]

        request.session.modified = True
        logger.debug("üßπ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")


def should_show_login_modal() -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞

    Returns:
        True –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã

    Example:
        >>> if should_show_login_modal():
        >>>     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    """
    try:
        user_manager = UserManager()
        admin_count = user_manager.get_admin_count()
        return admin_count > 0

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
        return False


def get_user_display_name(user_data: Optional[Dict[str, Any]]) -> Optional[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MongoDB

    Returns:
        –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∏–ª–∏ None

    Example:
        >>> display_name = get_user_display_name(user_data)
        >>> print(f"–ü—Ä–∏–≤–µ—Ç, {display_name}!")
    """
    if not user_data:
        return None

    try:
        profile = user_data.get('profile', {})
        first_name = profile.get('first_name', '')
        last_name = profile.get('last_name', '')

        if first_name and last_name:
            return f"{first_name} {last_name}"
        elif first_name:
            return first_name
        else:
            return user_data.get('username', 'User')

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è display name: {e}")
        return user_data.get('username', 'User')


def verify_user_permissions(user_data: Dict[str, Any],
                            required_permission: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        required_permission: –¢—Ä–µ–±—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ

    Returns:
        True –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å

    Example:
        >>> if verify_user_permissions(user_data, 'can_manage_users'):
        >>>     # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    """
    try:
        # –°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
        if user_data.get('is_super_admin', False):
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        permissions = user_data.get('permissions', {})
        return permissions.get(required_permission, False)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
        return False


def get_user_by_email(email: str) -> Optional[Dict[str, Any]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email

    Args:
        email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
    """
    try:
        user_manager = UserManager()
        return user_manager.find_user_by_email(email)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: {e}")
        return None


# ==================== –ü–†–ò–í–ê–¢–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def _update_login_success(username: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
    try:
        user_manager = UserManager()
        collection = user_manager.get_collection()

        if collection is not None:
            collection.update_one(
                {'username': username},
                {
                    '$set': {
                        'last_login': datetime.datetime.now(),
                        'failed_login_attempts': 0,
                        'locked_until': None
                    }
                }
            )
            logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –¥–ª—è '{username}'")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞ –¥–ª—è '{username}': {e}")


def _update_login_failure(username: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    try:
        user_manager = UserManager()
        collection = user_manager.get_collection()

        if collection is not None:
            result = collection.update_one(
                {'username': username},
                {'$inc': {'failed_login_attempts': 1}}
            )

            if result.modified_count > 0:
                user = collection.find_one({'username': username})
                if user and user.get('failed_login_attempts', 0) >= 5:
                    locked_until = datetime.datetime.now() + datetime.timedelta(minutes=15)
                    collection.update_one(
                        {'username': username},
                        {'$set': {'locked_until': locked_until}}
                    )
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {locked_until}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –¥–ª—è '{username}': {e}")