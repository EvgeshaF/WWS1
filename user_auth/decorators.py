# auth/decorators.py - –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞

from functools import wraps
from django.shortcuts import redirect
from django.contrib import messages
from django.http import JsonResponse, HttpResponseForbidden
from loguru import logger
import time
from collections import defaultdict
from datetime import datetime, timedelta

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è rate limiting
_rate_limit_storage = defaultdict(list)


def login_required(redirect_url: str = 'users:login_page'):

    def decorator(view_func):
        @wraps(view_func)
        def wrapper(request, *args, **kwargs):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            from .authentication import is_user_authenticated
            is_auth, user_data = is_user_authenticated(request)

            if not is_auth:
                logger.warning(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ {view_func.__name__}")

                # –î–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
                if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                    return JsonResponse({
                        'success': False,
                        'message': 'Authentifizierung erforderlich',
                        'redirect_url': redirect_url
                    }, status=401)

                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - —Ä–µ–¥–∏—Ä–µ–∫—Ç
                messages.warning(request, "Bitte melden Sie sich an, um auf diese Seite zuzugreifen")
                return redirect(redirect_url)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            from .session import refresh_session_activity
            refresh_session_activity(request)

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ request –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            request.user_data = user_data

            return view_func(request, *args, **kwargs)

        return wrapper

    return decorator


def admin_required(redirect_url: str = 'home'):

    def decorator(view_func):
        @wraps(view_func)
        def wrapper(request, *args, **kwargs):
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            from .authentication import is_user_authenticated
            is_auth, user_data = is_user_authenticated(request)

            is_ajax = request.headers.get('X-Requested-With') == 'XMLHttpRequest'
            is_htmx = request.headers.get('HX-Request') == 'true'

            if not is_auth:
                logger.warning(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ {view_func.__name__}")

                if is_ajax or is_htmx:
                    return JsonResponse({
                        'success': False,
                        'message': 'Administratorrechte erforderlich',
                        'redirect_url': '/users/login/'
                    }, status=403)

                messages.error(request, "Zugriff verweigert: Administratorrechte erforderlich")
                return redirect('users:login_page')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not user_data.get('is_admin', False):
                logger.warning(f"üö´ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø—Ä–∞–≤: {user_data.get('username')}")

                if is_ajax or is_htmx:
                    return JsonResponse({
                        'success': False,
                        'message': 'Diese Funktion ist nur f√ºr Administratoren verf√ºgbar',
                        'redirect_url': '/'
                    }, status=403)

                messages.error(request, "Zugriff verweigert: Diese Funktion ist nur f√ºr Administratoren verf√ºgbar")
                return redirect(redirect_url)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            from .session import refresh_session_activity
            refresh_session_activity(request)

            request.user_data = user_data

            return view_func(request, *args, **kwargs)

        return wrapper

    return decorator


def anonymous_required(redirect_url: str = 'home'):

    def decorator(view_func):
        @wraps(view_func)
        def wrapper(request, *args, **kwargs):
            from .authentication import is_user_authenticated
            is_auth, _ = is_user_authenticated(request)

            if is_auth:
                logger.debug(f"‚ÑπÔ∏è –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω —Å {view_func.__name__}")
                messages.info(request, "Sie sind bereits angemeldet")
                return redirect(redirect_url)

            return view_func(request, *args, **kwargs)

        return wrapper

    return decorator


def permission_required(permission: str, redirect_url: str = 'home'):

    def decorator(view_func):
        @wraps(view_func)
        def wrapper(request, *args, **kwargs):
            from .authentication import is_user_authenticated, verify_user_permissions
            is_auth, user_data = is_user_authenticated(request)

            if not is_auth:
                logger.warning(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ {view_func.__name__}")

                if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                    return JsonResponse({
                        'success': False,
                        'message': 'Authentifizierung erforderlich'
                    }, status=401)

                messages.warning(request, "Bitte melden Sie sich an")
                return redirect('users:login_page')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            if not verify_user_permissions(user_data, permission):
                logger.warning(f"üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è {view_func.__name__}: {user_data.get('username')}")

                if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                    return JsonResponse({
                        'success': False,
                        'message': f'Berechtigung "{permission}" erforderlich'
                    }, status=403)

                messages.error(request, "Zugriff verweigert: Unzureichende Berechtigungen")
                return redirect(redirect_url)

            from .session import refresh_session_activity
            refresh_session_activity(request)

            request.user_data = user_data

            return view_func(request, *args, **kwargs)

        return wrapper

    return decorator


def rate_limit_user(max_requests: int = 5, time_window: int = 60):

    def decorator(view_func):
        @wraps(view_func)
        def wrapper(request, *args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = request.session.get('user_id') or request.META.get('REMOTE_ADDR', 'unknown')
            key = f"{view_func.__name__}:{user_id}"

            now = datetime.now()
            cutoff = now - timedelta(seconds=time_window)

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            _rate_limit_storage[key] = [
                timestamp for timestamp in _rate_limit_storage[key]
                if timestamp > cutoff
            ]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(_rate_limit_storage[key]) >= max_requests:
                logger.warning(f"‚ö†Ô∏è Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è {user_id} –≤ {view_func.__name__}")

                if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                    return JsonResponse({
                        'success': False,
                        'message': 'Zu viele Anfragen. Bitte versuchen Sie es sp√§ter erneut.'
                    }, status=429)

                messages.warning(request, "Zu viele Anfragen. Bitte warten Sie einen Moment.")
                return HttpResponseForbidden("Rate limit exceeded")

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            _rate_limit_storage[key].append(now)

            return view_func(request, *args, **kwargs)

        return wrapper

    return decorator


def session_activity_required(max_inactive_seconds: int = 3600):

    def decorator(view_func):
        @wraps(view_func)
        def wrapper(request, *args, **kwargs):
            from .session import is_session_expired, clear_user_session

            if is_session_expired(request, max_inactive_seconds):
                logger.warning(f"‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è {request.session.get('username')}")

                clear_user_session(request)

                if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                    return JsonResponse({
                        'success': False,
                        'message': 'Sitzung abgelaufen. Bitte melden Sie sich erneut an.',
                        'redirect_url': 'users:login_page'
                    }, status=401)

                messages.warning(request, "Ihre Sitzung ist abgelaufen. Bitte melden Sie sich erneut an.")
                return redirect('users:login_page')

            return view_func(request, *args, **kwargs)

        return wrapper

    return decorator