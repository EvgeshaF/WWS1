// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ home/static/js/toasts.js –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –û–ë–ù–û–í–õ–ï–ù–û
(function() {
    'use strict';

    console.log('üçû Toast —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–æ—Å—Ç–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    function ensureToastContainer() {
        let container = document.getElementById('toast-container');
        if (!container) {
            container = document.createElement('div');
            container.id = 'toast-container';
            container.className = 'toast-container position-fixed';
            container.style.cssText = `
                top: 20px;
                right: 20px;
                z-index: 9999;
                max-width: 400px;
            `;
            document.body.appendChild(container);
        }
        return container;
    }

    // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ç–æ—Å—Ç–æ–≤
    window.showToast = function(message, type = 'info', delay = 5000) {
        const container = ensureToastContainer();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        const typeConfig = {
            'success': {
                bgClass: 'toast-success',
                icon: 'bi-check-circle-fill',
                title: 'Erfolg'
            },
            'error': {
                bgClass: 'toast-danger',
                icon: 'bi-x-circle-fill',
                title: 'Fehler'
            },
            'danger': {  // –ê–ª–∏–∞—Å –¥–ª—è error
                bgClass: 'toast-danger',
                icon: 'bi-x-circle-fill',
                title: 'Fehler'
            },
            'warning': {
                bgClass: 'toast-warning',
                icon: 'bi-exclamation-triangle-fill',
                title: 'Warnung'
            },
            'info': {
                bgClass: 'toast-info',
                icon: 'bi-info-circle-fill',
                title: 'Info'
            },
            'primary': {
                bgClass: 'toast-primary',
                icon: 'bi-info-circle-fill',
                title: 'Hinweis'
            }
        };

        const config = typeConfig[type] || typeConfig['info'];

        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è toast
        const toastId = 'toast-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);

        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è toast
        const toastHTML = `
            <div class="toast ${config.bgClass}" id="${toastId}" role="alert" aria-live="assertive" aria-atomic="true" style="--toast-delay: ${delay}ms;">
                <div class="toast-header">
                    <i class="bi ${config.icon} me-2"></i>
                    <strong class="me-auto">${config.title}</strong>
                    <button type="button" class="toast-close-btn" data-bs-dismiss="toast" aria-label="Schlie√üen">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
                <div class="toast-body">
                    ${message}
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º toast –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.insertAdjacentHTML('beforeend', toastHTML);

        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç toast
        const toastElement = document.getElementById(toastId);

        if (toastElement) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast
            setTimeout(() => {
                toastElement.classList.add('show');
            }, 10);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ delay
            setTimeout(() => {
                if (toastElement && toastElement.parentNode) {
                    toastElement.classList.add('hiding');
                    setTimeout(() => {
                        if (toastElement.parentNode) {
                            toastElement.remove();
                        }
                    }, 300);
                }
            }, delay);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            const closeBtn = toastElement.querySelector('.toast-close-btn');
            if (closeBtn) {
                closeBtn.addEventListener('click', () => {
                    toastElement.classList.add('hiding');
                    setTimeout(() => {
                        if (toastElement.parentNode) {
                            toastElement.remove();
                        }
                    }, 300);
                });
            }

            // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ toast
            toastElement.addEventListener('click', () => {
                toastElement.classList.add('hiding');
                setTimeout(() => {
                    if (toastElement.parentNode) {
                        toastElement.remove();
                    }
                }, 300);
            });

            console.log(`üçû Toast –ø–æ–∫–∞–∑–∞–Ω: ${type} - ${message.substring(0, 50)}...`);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ Django —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function showDjangoMessages() {
        const messagesContainer = document.getElementById('django-messages');
        if (!messagesContainer) return;

        const messages = messagesContainer.querySelectorAll('[data-tags]');
        messages.forEach(function(msgElement) {
            const tags = msgElement.getAttribute('data-tags');
            const text = msgElement.getAttribute('data-text');
            const delay = parseInt(msgElement.getAttribute('data-delay')) || 5000;

            if (text) {
                showToast(text, tags, delay);
            }
        });

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        messagesContainer.innerHTML = '';
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è HTMX —Å–æ–±—ã—Ç–∏–π
    document.body.addEventListener('htmx:afterRequest', function(event) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
        if (event.detail.mongodbHandled) {
            console.log('üîµ Toast system: —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ MongoDB –º–æ–¥—É–ª–µ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }

        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç JSON —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        try {
            const response = JSON.parse(event.detail.xhr.response);
            if (response.messages && Array.isArray(response.messages)) {
                response.messages.forEach(function(message) {
                    showToast(message.text, message.tags, message.delay || 5000);
                });
            }
        } catch (e) {
            // –ù–µ JSON –æ—Ç–≤–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            const contentType = event.detail.xhr.getResponseHeader('Content-Type');
            if (contentType && contentType.includes('application/json')) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞:', e);
                console.log('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', event.detail.xhr.response);
            }
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ HTMX
    document.body.addEventListener('htmx:responseError', function(event) {
        console.error('HTMX Response Error:', event.detail);
        showToast('Serverfehler aufgetreten', 'error');
    });

    document.body.addEventListener('htmx:sendError', function(event) {
        console.error('HTMX Send Error:', event.detail);
        showToast('Verbindungsfehler', 'error');
    });

    document.body.addEventListener('htmx:timeout', function(event) {
        console.error('HTMX Timeout:', event.detail);
        showToast('Anfrage-Zeit√ºberschreitung', 'warning');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Django —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('DOMContentLoaded', function() {
        showDjangoMessages();
    });

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –µ—Å–ª–∏ DOMContentLoaded —É–∂–µ –ø—Ä–æ—à–µ–ª
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', showDjangoMessages);
    } else {
        showDjangoMessages();
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
    window.toastSystem = {
        show: window.showToast,
        showSuccess: function(message, delay) {
            window.showToast(message, 'success', delay);
        },
        showError: function(message, delay) {
            window.showToast(message, 'error', delay);
        },
        showWarning: function(message, delay) {
            window.showToast(message, 'warning', delay);
        },
        showInfo: function(message, delay) {
            window.showToast(message, 'info', delay);
        }
    };

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    window.showMultipleToasts = function(messages) {
        if (!Array.isArray(messages)) return;

        messages.forEach(function(msg, index) {
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∫–∞–∑–æ–º —Ç–æ—Å—Ç–æ–≤
            setTimeout(function() {
                showToast(msg.text || msg.message, msg.tags || msg.type, msg.delay);
            }, index * 300);
        });
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ç–æ—Å—Ç–æ–≤
    window.clearAllToasts = function() {
        const container = document.getElementById('toast-container');
        if (container) {
            const toasts = container.querySelectorAll('.toast');
            toasts.forEach(function(toast) {
                toast.classList.add('hiding');
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.remove();
                    }
                }, 300);
            });
        }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ JavaScript
    window.addEventListener('error', function(event) {
        console.error('Global JavaScript Error:', event.error);
        if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
            showToast('Ein unerwarteter Fehler ist aufgetreten', 'error');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è unhandled promise rejections
    window.addEventListener('unhandledrejection', function(event) {
        console.error('Unhandled Promise Rejection:', event.reason);
        if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
            showToast('Ein unerwarteter Fehler ist aufgetreten', 'error');
        }
    });

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –≤—Ö–æ–¥–∞
    window.addEventListener('loginSuccess', function(event) {
        const data = event.detail;
        showToast(data.message || 'Erfolgreich angemeldet', 'success');

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            if (window.hideLoginModal) {
                window.hideLoginModal();
            }
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (data.redirect_url) {
                window.location.href = data.redirect_url;
            } else {
                window.location.reload();
            }
        }, 1500);
    });

    window.addEventListener('loginError', function(event) {
        const data = event.detail;
        showToast(data.message || 'Anmeldung fehlgeschlagen', 'error');
    });

    console.log('‚úÖ Toast —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');

})();