import datetime
import json

from loguru import logger

from mongodb.mongodb_config import MongoConfig
from mongodb.mongodb_utils import MongoConnection


class CompanyManager:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π"""

    def __init__(self):
        self.db = MongoConnection.get_database()
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if self.db is None:
            logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            self.company_collection_name = None
            return

        config = MongoConfig.read_config()
        db_name = config.get('db_name')
        if not db_name:
            logger.error("–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            self.company_collection_name = None
        else:
            self.company_collection_name = f"{db_name}_company_info"

    def get_collection(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if self.db is None or not self.company_collection_name:
            logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return None

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            existing_collections = self.db.list_collection_names()
            if self.company_collection_name not in existing_collections:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
                collection = self.db.create_collection(self.company_collection_name)
                logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{self.company_collection_name}' —Å–æ–∑–¥–∞–Ω–∞")

            return self.db[self.company_collection_name]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
            return None

    def has_company(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –∫–æ–º–ø–∞–Ω–∏—è"""
        try:
            collection = self.get_collection()
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if collection is None:
                logger.warning("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ has_company()")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –∫–æ–º–ø–∞–Ω–∏–∏
            logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ–º find_one({'type': 'company_info'}) –≤ has_company()")
            company = collection.find_one({'type': 'company_info'})
            result = company is not None  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            logger.info(f"üîç has_company() —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç = {result}")

            if company is not None:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company.get('company_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            else:
                logger.info("üîç –î–æ–∫—É–º–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            return False

    def get_company(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏"""
        try:
            collection = self.get_collection()
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if collection is None:
                logger.warning("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ get_company()")
                return None

            logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ–º find_one({'type': 'company_info'}) –≤ get_company()")
            company = collection.find_one({'type': 'company_info'})

            if company is not None:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                logger.info(f"üîç get_company() –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company.get('company_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                logger.info(f"üîç –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è: email={company.get('email')}, phone={company.get('phone')}")

                # ‚úÖ –û–ë–†–ê–¢–ù–û–ï –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ JSON-—Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if 'additional_contacts' in company and isinstance(company['additional_contacts'], list):
                    company['additional_contacts_data'] = json.dumps(company['additional_contacts'])
                    logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {len(company['additional_contacts'])} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ JSON-—Å—Ç—Ä–æ–∫—É")

                # ‚úÖ –û–ë–†–ê–¢–ù–û–ï –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤ –≤ –ø–ª–æ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if 'banking_accounts' in company and isinstance(company['banking_accounts'], list):
                    banking_accounts = company['banking_accounts']

                    # –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç
                    primary_account = next((acc for acc in banking_accounts if acc.get('is_primary')), None)
                    if not primary_account and banking_accounts:
                        primary_account = banking_accounts[0]

                    if primary_account:
                        company['bank_name'] = primary_account.get('bank_name', '')
                        company['iban'] = primary_account.get('iban', '')
                        company['bic'] = primary_account.get('bic', '')
                        company['account_holder'] = primary_account.get('account_holder', '')
                        company['bank_address'] = primary_account.get('bank_address', '')
                        company['account_type'] = primary_account.get('account_type', '')
                        company['banking_notes'] = primary_account.get('notes', '')

                    # –ù–∞—Ö–æ–¥–∏–º –≤—Ç–æ—Ä–∏—á–Ω—ã–π —Å—á—ë—Ç
                    secondary_accounts = [acc for acc in banking_accounts if not acc.get('is_primary')]
                    if secondary_accounts:
                        secondary_account = secondary_accounts[0]
                        company['secondary_bank_name'] = secondary_account.get('bank_name', '')
                        company['secondary_iban'] = secondary_account.get('iban', '')
                        company['secondary_bic'] = secondary_account.get('bic', '')
                        company['secondary_account_holder'] = secondary_account.get('account_holder', '')

                    logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {len(banking_accounts)} –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤ –≤ –ø–ª–æ—Å–∫–∏–µ –ø–æ–ª—è")

            else:
                logger.info("üîç get_company() –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            return company

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            return None

    def get_primary_company(self):
        """Alias –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é"""
        return self.get_company()

    def create_or_update_company(self, company_data):
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
        try:
            collection = self.get_collection()
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if collection is None:
                logger.error("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return False

            # ‚úÖ –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ JSON-—Å—Ç—Ä–æ–∫–∏ –≤ –º–∞—Å—Å–∏–≤
            if 'additional_contacts_data' in company_data:
                additional_contacts_str = company_data.get('additional_contacts_data', '[]')
                try:
                    if isinstance(additional_contacts_str, str):
                        additional_contacts = json.loads(additional_contacts_str)
                    elif isinstance(additional_contacts_str, list):
                        additional_contacts = additional_contacts_str
                    else:
                        additional_contacts = []

                    # –û—á–∏—â–∞–µ–º –æ—Ç _id –∏ –¥—Ä—É–≥–∏—Ö MongoDB –ø–æ–ª–µ–π
                    cleaned_contacts = []
                    for contact in additional_contacts:
                        if isinstance(contact, dict):
                            clean_contact = {k: v for k, v in contact.items() if k != '_id'}
                            cleaned_contacts.append(clean_contact)

                    company_data['additional_contacts'] = cleaned_contacts
                    logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {len(cleaned_contacts)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ —Å–æ —Å—Ç—Ä–æ–∫–æ–π
                    del company_data['additional_contacts_data']
                except json.JSONDecodeError:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å additional_contacts_data")
                    company_data['additional_contacts'] = []
                    if 'additional_contacts_data' in company_data:
                        del company_data['additional_contacts_data']

            # ‚úÖ –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–ª–æ—Å–∫–∏—Ö –ø–æ–ª–µ–π –≤ –º–∞—Å—Å–∏–≤
            banking_accounts = []

            # –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç
            if company_data.get('bank_name') or company_data.get('iban'):
                main_account = {}
                if company_data.get('bank_name'):
                    main_account['bank_name'] = company_data.get('bank_name')
                if company_data.get('iban'):
                    main_account['iban'] = company_data.get('iban')
                if company_data.get('bic'):
                    main_account['bic'] = company_data.get('bic')
                if company_data.get('account_holder'):
                    main_account['account_holder'] = company_data.get('account_holder')
                if company_data.get('bank_address'):
                    main_account['bank_address'] = company_data.get('bank_address')
                if company_data.get('account_type'):
                    main_account['account_type'] = company_data.get('account_type')

                main_account['is_primary'] = True
                main_account['notes'] = company_data.get('banking_notes', '')

                if 'bank_name' in main_account and 'iban' in main_account:
                    banking_accounts.append(main_account)

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–ª–æ—Å–∫–∏–µ –ø–æ–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á—ë—Ç–∞
                for field in ['bank_name', 'iban', 'bic', 'account_holder', 'bank_address', 'account_type', 'banking_notes']:
                    if field in company_data:
                        del company_data[field]

            # –í—Ç–æ—Ä–∏—á–Ω—ã–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç
            if company_data.get('secondary_bank_name') or company_data.get('secondary_iban'):
                secondary_account = {}
                if company_data.get('secondary_bank_name'):
                    secondary_account['bank_name'] = company_data.get('secondary_bank_name')
                if company_data.get('secondary_iban'):
                    secondary_account['iban'] = company_data.get('secondary_iban')
                if company_data.get('secondary_bic'):
                    secondary_account['bic'] = company_data.get('secondary_bic')
                if company_data.get('secondary_account_holder'):
                    secondary_account['account_holder'] = company_data.get('secondary_account_holder')

                secondary_account['is_primary'] = False
                secondary_account['notes'] = ''

                if 'bank_name' in secondary_account and 'iban' in secondary_account:
                    banking_accounts.append(secondary_account)

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–ª–æ—Å–∫–∏–µ –ø–æ–ª—è –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ —Å—á—ë—Ç–∞
                for field in ['secondary_bank_name', 'secondary_iban', 'secondary_bic', 'secondary_account_holder']:
                    if field in company_data:
                        del company_data[field]

            if banking_accounts:
                company_data['banking_accounts'] = banking_accounts
                logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {len(banking_accounts)} –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤")

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
            now = datetime.datetime.now()
            company_data.update({
                'type': 'company_info',  # –¢–∏–ø –∑–∞–ø–∏—Å–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                'modified_at': now
            })

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
            existing = collection.find_one({'type': 'company_info'})

            if existing is not None:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é")
                result = collection.update_one(
                    {'type': 'company_info'},
                    {'$set': company_data}
                )
                if result.modified_count > 0:
                    logger.success(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ '{company_data['company_name']}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    return True
                else:
                    logger.warning("–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")
                    return True
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                logger.info("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é")
                company_data['created_at'] = now
                result = collection.insert_one(company_data)
                if result.inserted_id is not None:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    logger.success(f"–ö–æ–º–ø–∞–Ω–∏—è '{company_data['company_name']}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å ID: {result.inserted_id}")
                    return True

            return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            return False

    def delete_company(self):
        """–£–¥–∞–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)"""
        try:
            collection = self.get_collection()
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if collection is None:
                return False

            result = collection.delete_one({'type': 'company_info'})
            if result.deleted_count > 0:
                logger.success("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∞")
                return True
            else:
                logger.warning("–ö–æ–º–ø–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            return False

    def get_company_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏"""
        try:
            collection = self.get_collection()
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if collection is None:
                return None

            company = collection.find_one({'type': 'company_info'})
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if company is None:
                return None

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            filled_fields = 0
            total_fields = 0

            # –ë–∞–∑–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–®–∞–≥–∏ 1-3)
            required_fields = [
                'company_name', 'legal_form', 'street', 'postal_code', 'city', 'country', 'email', 'phone'
            ]

            # –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–®–∞–≥ 5)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ banking_accounts (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç) –∏–ª–∏ —Å—Ç–∞—Ä—ã–µ –ø–ª–æ—Å–∫–∏–µ –ø–æ–ª—è
            if 'banking_accounts' in company and company['banking_accounts']:
                banking_accounts = company['banking_accounts']

                # –û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
                primary_account = next((acc for acc in banking_accounts if acc.get('is_primary')), None)
                if not primary_account and banking_accounts:
                    primary_account = banking_accounts[0]

                if primary_account:
                    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø–æ–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á—ë—Ç–∞
                    banking_required = ['bank_name', 'iban', 'bic', 'account_holder']
                    for field in banking_required:
                        total_fields += 1
                        if field in primary_account and primary_account[field] and str(primary_account[field]).strip():
                            filled_fields += 1
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á—ë—Ç–∞, –≤—Å—ë —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º 4 –ø—É—Å—Ç—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è
                    total_fields += 4
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø–ª–æ—Å–∫–∏–µ –ø–æ–ª—è) - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                banking_required_old = ['bank_name', 'iban', 'bic', 'account_holder']

                for field in banking_required_old:
                    total_fields += 1
                    if field in company and company[field] and str(company[field]).strip():
                        filled_fields += 1

            # –ë–∞–∑–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
            for field in required_fields:
                total_fields += 1
                if field in company and company[field] and str(company[field]).strip():
                    filled_fields += 1

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            additional_contacts = company.get('additional_contacts_data', [])
            if isinstance(additional_contacts, str):
                try:
                    additional_contacts = json.loads(additional_contacts)
                except:
                    additional_contacts = []

            return {
                'filled_fields': filled_fields,
                'total_fields': total_fields,
                'completion_percentage': round((filled_fields / total_fields) * 100, 1) if total_fields > 0 else 0,
                'additional_contacts_count': len(additional_contacts) if additional_contacts else 0,
                'created_at': company.get('created_at'),
                'modified_at': company.get('modified_at')
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            return None