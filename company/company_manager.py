# company/company_manager.py - –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ MongoDB –æ–±—ä–µ–∫—Ç–æ–≤

import datetime
import json

from loguru import logger

from mongodb.mongodb_config import MongoConfig
from mongodb.mongodb_utils import MongoConnection


class CompanyManager:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π"""

    def __init__(self):
        self.db = MongoConnection.get_database()
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if self.db is None:
            logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            self.company_collection_name = None
            return

        config = MongoConfig.read_config()
        db_name = config.get('db_name')
        if not db_name:
            logger.error("–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            self.company_collection_name = None
        else:
            self.company_collection_name = f"{db_name}_company_info"

    def get_collection(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if self.db is None or not self.company_collection_name:
            logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return None

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            existing_collections = self.db.list_collection_names()
            if self.company_collection_name not in existing_collections:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
                collection = self.db.create_collection(self.company_collection_name)
                logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{self.company_collection_name}' —Å–æ–∑–¥–∞–Ω–∞")

            return self.db[self.company_collection_name]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
            return None

    def has_company(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –∫–æ–º–ø–∞–Ω–∏—è"""
        try:
            collection = self.get_collection()
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if collection is None:
                logger.warning("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ has_company()")
                return False

            # ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ–º find_one({'type': 'company_info'}) –≤ has_company()")
            company = collection.find_one({'type': 'company_info'})

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –Ω–æ –∏ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if company is None:
                logger.info("üîç has_company() —Ä–µ–∑—É–ª—å—Ç–∞—Ç: False (–¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)")
                return False

            # ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –∫–æ–º–ø–∞–Ω–∏–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            has_required_fields = (
                    company.get('company_name') and
                    str(company.get('company_name')).strip() != '' and
                    company.get('legal_form') and
                    str(company.get('legal_form')).strip() != ''
            )

            if not has_required_fields:
                logger.warning("üîç has_company() —Ä–µ–∑—É–ª—å—Ç–∞—Ç: False (–Ω–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç, –Ω–æ –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π)")
                logger.warning(f"üîç company_name: '{company.get('company_name')}'")
                logger.warning(f"üîç legal_form: '{company.get('legal_form')}'")
                return False

            logger.info(f"üîç has_company() —Ä–µ–∑—É–ª—å—Ç–∞—Ç: True (–Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company.get('company_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')})")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            return False

    def get_company(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏"""
        try:
            collection = self.get_collection()
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if collection is None:
                logger.warning("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ get_company()")
                return None

            logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ–º find_one({'type': 'company_info'}) –≤ get_company()")
            company = collection.find_one({'type': 'company_info'})

            if company is None:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                logger.info("üîç get_company() –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None
            else:
                logger.info(f"üîç get_company() –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company.get('company_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                logger.info(f"üîç –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è: email={company.get('email')}, phone={company.get('phone')}")
                return company

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            return None

    def get_primary_company(self):
        """Alias –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é"""
        return self.get_company()

    def create_or_update_company(self, company_data):
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
        try:
            collection = self.get_collection()
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if collection is None:
                logger.error("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return False

            # ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['company_name', 'legal_form']
            for field in required_fields:
                if not company_data.get(field) or str(company_data.get(field)).strip() == '':
                    logger.error(f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ")
                    return False

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
            now = datetime.datetime.now()
            company_data.update({
                'type': 'company_info',  # –¢–∏–ø –∑–∞–ø–∏—Å–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                'modified_at': now
            })

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
            existing = collection.find_one({'type': 'company_info'})

            if existing is not None:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é")
                result = collection.update_one(
                    {'type': 'company_info'},
                    {'$set': company_data}
                )
                if result.modified_count > 0:
                    logger.success(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ '{company_data['company_name']}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    return True
                else:
                    logger.warning("–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")
                    return True
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                logger.info("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é")
                company_data['created_at'] = now
                result = collection.insert_one(company_data)
                if result.inserted_id is not None:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    logger.success(f"–ö–æ–º–ø–∞–Ω–∏—è '{company_data['company_name']}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å ID: {result.inserted_id}")
                    return True

            return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            return False

    def delete_company(self):
        """–£–¥–∞–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)"""
        try:
            collection = self.get_collection()
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if collection is None:
                return False

            result = collection.delete_one({'type': 'company_info'})
            if result.deleted_count > 0:
                logger.success("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∞")
                return True
            else:
                logger.warning("–ö–æ–º–ø–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            return False

    def get_company_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏"""
        try:
            collection = self.get_collection()
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if collection is None:
                return None

            company = collection.find_one({'type': 'company_info'})
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if company is None:
                return None

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            filled_fields = 0
            total_fields = 0
            required_fields = ['company_name', 'legal_form', 'street', 'postal_code', 'city', 'country', 'email', 'phone']
            optional_fields = ['commercial_register', 'tax_number', 'vat_id', 'tax_id', 'fax', 'website', 'ceo_first_name', 'ceo_last_name', 'contact_person_first_name', 'contact_person_last_name', 'industry', 'description']

            for field in required_fields + optional_fields:
                total_fields += 1
                if field in company and company[field] and str(company[field]).strip():
                    filled_fields += 1

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            additional_contacts = company.get('additional_contacts_data', [])
            if isinstance(additional_contacts, str):
                try:
                    additional_contacts = json.loads(additional_contacts)
                except:
                    additional_contacts = []

            return {
                'filled_fields': filled_fields,
                'total_fields': total_fields,
                'completion_percentage': round((filled_fields / total_fields) * 100, 1) if total_fields > 0 else 0,
                'additional_contacts_count': len(additional_contacts) if additional_contacts else 0,
                'created_at': company.get('created_at'),
                'modified_at': company.get('modified_at')
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            return None

    # ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    def debug_company_status(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"""
        try:
            collection = self.get_collection()
            if collection is None:
                return {
                    'error': 'Collection unavailable',
                    'has_company': False,
                    'company_data': None
                }

            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            company_data = collection.find_one({'type': 'company_info'})

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º has_company –ª–æ–≥–∏–∫—É
            has_company_result = self.has_company()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return {
                'collection_name': self.company_collection_name,
                'collection_exists': collection is not None,
                'raw_document_found': company_data is not None,
                'has_company_result': has_company_result,
                'company_name': company_data.get('company_name') if company_data else None,
                'legal_form': company_data.get('legal_form') if company_data else None,
                'document_fields': list(company_data.keys()) if company_data else [],
                'all_documents_count': collection.count_documents({}),
                'company_documents_count': collection.count_documents({'type': 'company_info'})
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
            return {
                'error': str(e),
                'has_company': False,
                'company_data': None
            }