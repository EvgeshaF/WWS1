# company/forms.py - –ù–û–í–´–ô –§–ê–ô–õ: —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏

from django import forms
from django.core.validators import RegexValidator
import re
from mongodb.mongodb_utils import MongoConnection
from mongodb.mongodb_config import MongoConfig
from loguru import logger


def get_salutations_from_mongodb():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∞–ª—é—Ç–∞—Ü–∏–∏ (Anrede) –∏–∑ MongoDB –∫–æ–ª–ª–µ–∫—Ü–∏–∏ basic_salutations"""
    try:
        logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º salutations –∏–∑ MongoDB (for company)")
        db = MongoConnection.get_database()
        if db is None:
            logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return get_default_salutation_choices()

        config = MongoConfig.read_config()
        db_name = config.get('db_name')
        if not db_name:
            logger.error("–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return get_default_salutation_choices()

        salutations_collection_name = f"{db_name}_basic_salutations"
        collections = db.list_collection_names()
        if salutations_collection_name not in collections:
            logger.warning(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{salutations_collection_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return get_default_salutation_choices()

        salutations_collection = db[salutations_collection_name]

        salutations_cursor = salutations_collection.find(
            {'deleted': {'$ne': True}},
            {'salutation': 1}
        ).sort('salutation', 1)

        choices = [('', '-- Ausw√§hlen --')]
        count = 0
        seen_salutations = set()

        for salutation_doc in salutations_cursor:
            salutation_value = salutation_doc.get('salutation', '').strip()

            if salutation_value and salutation_value not in seen_salutations:
                code = salutation_value.lower()
                display_name = salutation_value

                choices.append((code, display_name))
                seen_salutations.add(salutation_value)
                count += 1

        logger.success(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {count} salutations –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏")
        return choices

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ salutations –∏–∑ MongoDB (company): {e}")
        return get_default_salutation_choices()


def get_default_salutation_choices():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∞–ª—é—Ç–∞—Ü–∏–π –∫–∞–∫ fallback"""
    return [
        ('', '-- Ausw√§hlen --'),
        ('herr', 'Herr'),
        ('frau', 'Frau'),
        ('divers', 'Divers'),
    ]


def get_titles_from_mongodb():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç titles –∏–∑ MongoDB –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    try:
        logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º titles –∏–∑ MongoDB (for company)")
        db = MongoConnection.get_database()
        if db is None:
            logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return get_default_title_choices()

        config = MongoConfig.read_config()
        db_name = config.get('db_name')
        if not db_name:
            logger.error("–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return get_default_title_choices()

        titles_collection_name = f"{db_name}_basic_titles"
        collections = db.list_collection_names()
        if titles_collection_name not in collections:
            logger.warning(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{titles_collection_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return get_default_title_choices()

        titles_collection = db[titles_collection_name]
        titles_cursor = titles_collection.find(
            {'deleted': {'$ne': True}, 'active': {'$ne': False}},
            {'code': 1, 'name': 1, 'display_order': 1}
        ).sort('display_order', 1)

        choices = [('', '-- Kein Titel --')]
        count = 0

        for title_doc in titles_cursor:
            code = title_doc.get('code', '').strip()
            name = title_doc.get('name', code).strip()

            if code:
                choices.append((code, name))
                count += 1

        logger.success(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {count} titles –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏")
        return choices

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ titles –∏–∑ MongoDB (company): {e}")
        return get_default_title_choices()


def get_default_title_choices():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∏—Ç—É–ª–æ–≤ –∫–∞–∫ fallback"""
    return [
        ('', '-- Kein Titel --'),
        ('dr', 'Dr.'),
        ('prof', 'Prof.'),
        ('prof_dr', 'Prof. Dr.'),
        ('dipl_ing', 'Dipl.-Ing.'),
        ('dipl_kfm', 'Dipl.-Kfm.'),
        ('dipl_oec', 'Dipl.-Oec.'),
        ('mag', 'Mag.'),
        ('mba', 'MBA'),
        ('msc', 'M.Sc.'),
        ('ba', 'B.A.'),
        ('bsc', 'B.Sc.'),
        ('beng', 'B.Eng.'),
    ]


def get_communication_types_from_mongodb():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–∏–ø—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏–∑ MongoDB –∫–æ–ª–ª–µ–∫—Ü–∏–∏ basic_communications"""
    try:
        logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏–∑ MongoDB (for company)")
        db = MongoConnection.get_database()
        if db is None:
            logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return get_default_contact_type_choices()

        config = MongoConfig.read_config()
        db_name = config.get('db_name')
        if not db_name:
            logger.error("–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return get_default_contact_type_choices()

        communications_collection_name = f"{db_name}_basic_communications"
        collections = db.list_collection_names()
        if communications_collection_name not in collections:
            logger.warning(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{communications_collection_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return get_default_contact_type_choices()

        communications_collection = db[communications_collection_name]
        communications_cursor = communications_collection.find(
            {'deleted': {'$ne': True}, 'active': {'$ne': False}},
            {
                'type': 1, 'icon': 1, 'required_format': 1, 'display_order': 1,
                'validation_pattern': 1, 'placeholder': 1, 'hint_de': 1
            }
        ).sort('display_order', 1)

        choices = [('', '-- Kontakttyp ausw√§hlen --')]
        count = 0

        # –ú–∞–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫ Bootstrap Icons –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
        icon_mapping = {
            'envelope': 'üìß',
            'phone': 'üìû',
            'mobile': 'üì±',
            'printer': 'üì†',
            'globe': 'üåê',
            'linkedin': 'üíº',
            'person-badge': 'üîó',
            'exclamation-triangle': 'üö®',
            'question-circle': 'üìù'
        }

        for comm_doc in communications_cursor:
            comm_type = comm_doc.get('type', '').strip()
            icon = comm_doc.get('icon', 'question-circle')
            required_format = comm_doc.get('required_format', '').lower()

            if comm_type:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º required_format –∫–∞–∫ –∫–ª—é—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, email, mobile, fax)
                # –ï—Å–ª–∏ required_format –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º type –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
                key = required_format if required_format else comm_type.lower().replace('-', '_')

                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ —Ç–µ–∫—Å—Ç—É
                emoji = icon_mapping.get(icon, 'üìù')

                # –ê–î–ê–ü–¢–ê–¶–ò–Ø –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: —Ä–∞–∑–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
                if key == 'email':
                    display_text = f"{emoji} {comm_type} (Abteilung)"
                elif key == 'phone':
                    display_text = f"{emoji} Telefon (Abteilung)"
                elif key == 'mobile':
                    display_text = f"{emoji} Mobil"
                elif key == 'emergency':
                    display_text = f"{emoji} Notfallkontakt"
                else:
                    display_text = f"{emoji} {comm_type}"

                choices.append((key, display_text))
                count += 1

                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–∏–ø –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {key} -> {display_text}")

        logger.success(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Ç–∏–ø–æ–≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        return choices

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏–∑ MongoDB (company): {e}")
        return get_default_contact_type_choices()


def get_default_contact_type_choices():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∫–∞–∫ fallback –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏"""
    return [
        ('', '-- Kontakttyp ausw√§hlen --'),
        ('email', 'üìß E-Mail (Abteilung)'),
        ('phone', 'üìû Telefon (Abteilung)'),
        ('mobile', 'üì± Mobil'),
        ('fax', 'üì† Fax'),
        ('website', 'üåê Website'),
        ('linkedin', 'üíº LinkedIn (Unternehmen)'),
        ('xing', 'üîó XING (Unternehmen)'),
        ('emergency', 'üö® Notfallkontakt'),
        ('other', 'üìù Sonstige'),
    ]


def get_communication_config_from_mongodb():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–∏–ø–æ–≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –¥–ª—è JavaScript (–∫–æ–º–ø–∞–Ω–∏—è)"""
    try:
        logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –¥–ª—è JavaScript (company)")
        db = MongoConnection.get_database()
        if db is None:
            return get_default_communication_config()

        config = MongoConfig.read_config()
        db_name = config.get('db_name')
        if not db_name:
            return get_default_communication_config()

        communications_collection_name = f"{db_name}_basic_communications"
        collections = db.list_collection_names()
        if communications_collection_name not in collections:
            return get_default_communication_config()

        communications_collection = db[communications_collection_name]
        communications_cursor = communications_collection.find(
            {'deleted': {'$ne': True}, 'active': {'$ne': False}},
            {
                'type': 1, 'icon': 1, 'required_format': 1, 'display_order': 1,
                'validation_pattern': 1, 'placeholder': 1, 'hint_de': 1
            }
        ).sort('display_order', 1)

        config_dict = {}

        for comm_doc in communications_cursor:
            comm_type = comm_doc.get('type', '').strip()
            icon = comm_doc.get('icon', 'question-circle')
            required_format = comm_doc.get('required_format', '').lower()
            validation_pattern = comm_doc.get('validation_pattern', '')
            placeholder = comm_doc.get('placeholder', '')
            hint_de = comm_doc.get('hint_de', '')

            if comm_type:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º required_format –∫–∞–∫ –∫–ª—é—á
                key = required_format if required_format else comm_type.lower().replace('-', '_')

                # –ú–∞–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫ –¥–ª—è Bootstrap Icons –∫–ª–∞—Å—Å–∞
                icon_class_mapping = {
                    'envelope': 'bi-envelope',
                    'phone': 'bi-telephone',
                    'mobile': 'bi-phone',
                    'printer': 'bi-printer',
                    'globe': 'bi-globe',
                    'linkedin': 'bi-linkedin',
                    'person-badge': 'bi-person-badge',
                    'exclamation-triangle': 'bi-exclamation-triangle',
                    'question-circle': 'bi-question-circle'
                }

                # –ê–î–ê–ü–¢–ê–¶–ò–Ø –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: –∫–æ–º–ø–∞–Ω–∏–π—Å–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
                company_placeholders = {
                    'email': 'vertrieb@firma.de',
                    'phone': '+49 123 456789',
                    'mobile': '+49 170 1234567',
                    'fax': '+49 123 456789',
                    'website': 'https://www.firma.de',
                    'linkedin': 'linkedin.com/company/firmenname',
                    'xing': 'xing.com/companies/firmenname',
                    'emergency': '+49 170 1234567'
                }

                company_hints = {
                    'email': 'Geben Sie eine E-Mail-Adresse ein (z.B. vertrieb@firma.de)',
                    'phone': 'Geben Sie eine Telefonnummer ein (z.B. +49 123 456789)',
                    'mobile': 'Geben Sie eine Mobilnummer ein (z.B. +49 170 1234567)',
                    'fax': 'Geben Sie eine Faxnummer ein (z.B. +49 123 456789)',
                    'website': 'Geben Sie eine Website-URL ein (z.B. https://www.firma.de)',
                    'linkedin': 'Geben Sie das LinkedIn-Unternehmensprofil ein',
                    'xing': 'Geben Sie das XING-Unternehmensprofil ein',
                    'emergency': 'Geben Sie einen Notfallkontakt ein',
                    'other': 'Geben Sie die entsprechenden Kontaktdaten ein'
                }

                config_dict[key] = {
                    'label': comm_type,
                    'icon_class': icon_class_mapping.get(icon, 'bi-question-circle'),
                    'validation_pattern': validation_pattern,
                    'placeholder': company_placeholders.get(key, placeholder or f"{comm_type} eingeben..."),
                    'hint': company_hints.get(key, hint_de or f"Geben Sie {comm_type} ein")
                }

        logger.success(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è {len(config_dict)} —Ç–∏–ø–æ–≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏")
        return config_dict

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        return get_default_communication_config()


def get_default_communication_config():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–∏–ø–æ–≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∫–∞–∫ fallback –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏"""
    return {
        'email': {
            'label': 'E-Mail',
            'icon_class': 'bi-envelope',
            'validation_pattern': '^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$',
            'placeholder': 'vertrieb@firma.de',
            'hint': 'Geben Sie eine E-Mail-Adresse ein (z.B. vertrieb@firma.de)'
        },
        'phone': {
            'label': 'Telefon',
            'icon_class': 'bi-telephone',
            'validation_pattern': '^[\\+]?[0-9\\s\\-\\(\\)]{7,20}$',
            'placeholder': '+49 123 456789',
            'hint': 'Geben Sie eine Telefonnummer ein'
        },
        'mobile': {
            'label': 'Mobil',
            'icon_class': 'bi-phone',
            'validation_pattern': '^[\\+]?[0-9\\s\\-\\(\\)]{7,20}$',
            'placeholder': '+49 170 1234567',
            'hint': 'Geben Sie eine Mobilnummer ein'
        },
        'fax': {
            'label': 'Fax',
            'icon_class': 'bi-printer',
            'validation_pattern': '^[\\+]?[0-9\\s\\-\\(\\)]{7,20}$',
            'placeholder': '+49 123 456789',
            'hint': 'Geben Sie eine Faxnummer ein'
        },
        'website': {
            'label': 'Website',
            'icon_class': 'bi-globe',
            'validation_pattern': '^https?:\\/\\/.+\\..+$|^www\\..+\\..+$',
            'placeholder': 'https://www.firma.de',
            'hint': 'Geben Sie eine Website-URL ein'
        },
        'linkedin': {
            'label': 'LinkedIn',
            'icon_class': 'bi-linkedin',
            'validation_pattern': '^(https?:\\/\\/)?(www\\.)?linkedin\\.com\\/company\\/[a-zA-Z0-9\\-_]+\\/?$|^[a-zA-Z0-9\\-_]+$',
            'placeholder': 'linkedin.com/company/firmenname',
            'hint': 'Geben Sie das LinkedIn-Unternehmensprofil ein'
        },
        'xing': {
            'label': 'XING',
            'icon_class': 'bi-person-badge',
            'validation_pattern': '^(https?:\\/\\/)?(www\\.)?xing\\.com\\/companies\\/[a-zA-Z0-9\\-_]+\\/?$|^[a-zA-Z0-9\\-_]+$',
            'placeholder': 'xing.com/companies/firmenname',
            'hint': 'Geben Sie das XING-Unternehmensprofil ein'
        },
        'emergency': {
            'label': 'Notfall',
            'icon_class': 'bi-exclamation-triangle',
            'validation_pattern': '^[\\+]?[0-9\\s\\-\\(\\)]{7,20}$',
            'placeholder': '+49 170 1234567',
            'hint': 'Geben Sie einen Notfallkontakt ein'
        },
        'other': {
            'label': 'Sonstige',
            'icon_class': 'bi-question-circle',
            'validation_pattern': '.{3,}',
            'placeholder': 'Kontaktdaten eingeben...',
            'hint': 'Geben Sie die entsprechenden Kontaktdaten ein'
        }
    }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ choices (–¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏)
def get_contact_type_choices():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ MongoDB –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback (–¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏)"""
    return get_communication_types_from_mongodb()


def get_countries_from_mongodb():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω—ã –∏–∑ MongoDB –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    try:
        logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –∏–∑ MongoDB")
        db = MongoConnection.get_database()
        if db is None:
            logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return get_default_country_choices()

        config = MongoConfig.read_config()
        db_name = config.get('db_name')
        if not db_name:
            logger.error("–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return get_default_country_choices()

        countries_collection_name = f"{db_name}_countries"
        collections = db.list_collection_names()
        if countries_collection_name not in collections:
            logger.warning(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{countries_collection_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return get_default_country_choices()

        countries_collection = db[countries_collection_name]
        countries_cursor = countries_collection.find(
            {'deleted': {'$ne': True}, 'active': {'$ne': False}},
            {'code': 1, 'name': 1, 'display_order': 1}
        ).sort('display_order', 1)

        choices = [('', '-- Land ausw√§hlen --')]
        count = 0

        for country_doc in countries_cursor:
            code = country_doc.get('code', '').strip()
            name = country_doc.get('name', code).strip()

            if code:
                choices.append((code, name))
                count += 1

        logger.success(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Å—Ç—Ä–∞–Ω –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        return choices

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω –∏–∑ MongoDB: {e}")
        return get_default_country_choices()


def get_default_country_choices():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –∫–∞–∫ fallback"""
    return [
        ('', '-- Land ausw√§hlen --'),
        ('deutschland', 'Deutschland'),
        ('oesterreich', '√ñsterreich'),
        ('schweiz', 'Schweiz'),
        ('niederlande', 'Niederlande'),
        ('belgien', 'Belgien'),
        ('frankreich', 'Frankreich'),
        ('italien', 'Italien'),
        ('spanien', 'Spanien'),
        ('portugal', 'Portugal'),
        ('polen', 'Polen'),
        ('tschechien', 'Tschechien'),
        ('ungarn', 'Ungarn'),
        ('daenemark', 'D√§nemark'),
        ('schweden', 'Schweden'),
        ('norwegen', 'Norwegen'),
        ('sonstige', 'Sonstige'),
    ]


def get_industries_from_mongodb():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç—Ä–∞—Å–ª–∏ –∏–∑ MongoDB –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    try:
        logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ä–∞—Å–ª–∏ –∏–∑ MongoDB")
        db = MongoConnection.get_database()
        if db is None:
            logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return get_default_industry_choices()

        config = MongoConfig.read_config()
        db_name = config.get('db_name')
        if not db_name:
            logger.error("–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return get_default_industry_choices()

        industries_collection_name = f"{db_name}_industries"
        collections = db.list_collection_names()
        if industries_collection_name not in collections:
            logger.warning(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{industries_collection_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return get_default_industry_choices()

        industries_collection = db[industries_collection_name]
        industries_cursor = industries_collection.find(
            {'deleted': {'$ne': True}, 'active': {'$ne': False}},
            {'code': 1, 'name': 1, 'display_order': 1}
        ).sort('display_order', 1)

        choices = [('', '-- Branche ausw√§hlen --')]
        count = 0

        for industry_doc in industries_cursor:
            code = industry_doc.get('code', '').strip()
            name = industry_doc.get('name', code).strip()

            if code:
                choices.append((code, name))
                count += 1

        logger.success(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {count} –æ—Ç—Ä–∞—Å–ª–µ–π –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        return choices

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ä–∞—Å–ª–µ–π –∏–∑ MongoDB: {e}")
        return get_default_industry_choices()


def get_default_industry_choices():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Ä–∞—Å–ª–µ–π –∫–∞–∫ fallback"""
    return [
        ('', '-- Branche ausw√§hlen --'),
        ('handel', 'Handel'),
        ('dienstleistung', 'Dienstleistung'),
        ('produktion', 'Produktion'),
        ('it_software', 'IT/Software'),
        ('beratung', 'Beratung'),
        ('finanzwesen', 'Finanzwesen'),
        ('gesundheitswesen', 'Gesundheitswesen'),
        ('bildung', 'Bildung'),
        ('tourismus', 'Tourismus'),
        ('transport_logistik', 'Transport/Logistik'),
        ('bau', 'Bau'),
        ('immobilien', 'Immobilien'),
        ('energie', 'Energie'),
        ('medien', 'Medien'),
        ('gastronomie', 'Gastronomie'),
        ('einzelhandel', 'Einzelhandel'),
        ('grosshandel', 'Grosshandel'),
        ('landwirtschaft', 'Landwirtschaft'),
        ('rechtswesen', 'Rechtswesen'),
        ('sonstige', 'Sonstige'),
    ]


# ==================== –§–û–†–ú–´ ====================

class CompanyBasicDataForm(forms.Form):
    """–®–∞–≥ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ + Gesch√§ftsf√ºhrer"""

    LEGAL_FORM_CHOICES = [
        ('', '-- Rechtsform ausw√§hlen --'),
        ('gmbh', 'GmbH'),
        ('ag', 'AG'),
        ('ug', 'UG (haftungsbeschr√§nkt)'),
        ('ohg', 'OHG'),
        ('kg', 'KG'),
        ('gbr', 'GbR'),
        ('eg', 'eG'),
        ('einzelunternehmen', 'Einzelunternehmen'),
        ('freiberufler', 'Freiberufler'),
        ('se', 'SE (Societas Europaea)'),
        ('ltd', 'Ltd.'),
        ('sonstige', 'Sonstige'),
    ]

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    company_name = forms.CharField(
        label="Firmenname",
        max_length=100,
        min_length=2,
        validators=[
            RegexValidator(
                regex=r'^[a-zA-Z√§√∂√º√Ñ√ñ√ú√ü0-9\s\.\-&,]+$',
                message='Firmenname darf nur Buchstaben, Zahlen und g√§ngige Sonderzeichen enthalten'
            )
        ],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Vollst√§ndiger Firmenname eingeben',
            'autofocus': True
        })
    )

    legal_form = forms.ChoiceField(
        label="Rechtsform",
        choices=LEGAL_FORM_CHOICES,
        required=True,
        widget=forms.Select(attrs={
            'class': 'form-control'
        })
    )

    # –ë–õ–û–ö GESCH√ÑFTSF√úHRER
    ceo_salutation = forms.ChoiceField(
        label="Anrede",
        choices=[],  # –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ MongoDB
        required=False,
        widget=forms.Select(attrs={
            'class': 'form-control'
        })
    )

    ceo_title = forms.ChoiceField(
        label="Titel",
        choices=[],  # –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ MongoDB
        required=False,
        widget=forms.Select(attrs={
            'class': 'form-control'
        })
    )

    ceo_first_name = forms.CharField(
        label="Vorname",
        max_length=50,
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Vorname eingeben'
        })
    )

    ceo_last_name = forms.CharField(
        label="Nachname",
        max_length=50,
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Nachname eingeben'
        })
    )

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º salutations –∏–∑ MongoDB
        salutation_choices = get_salutations_from_mongodb()
        self.fields['ceo_salutation'].choices = salutation_choices
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(salutation_choices)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ CEO salutation")

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º titles –∏–∑ MongoDB
        title_choices = get_titles_from_mongodb()
        self.fields['ceo_title'].choices = title_choices
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(title_choices)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ CEO title")


class CompanyRegistrationForm(forms.Form):
    """–®–∞–≥ 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –í–°–ï –ü–û–õ–Ø –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´"""

    commercial_register = forms.CharField(
        label="Handelsregister",
        max_length=50,
        required=True,
        validators=[
            RegexValidator(
                regex=r'^(HR[AB]\s*\d+|HRA\s*\d+|HRB\s*\d+)$',
                message='Format: HRA12345 oder HRB12345'
            )
        ],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'z.B. HRB12345'
        }),
        error_messages={
            'required': 'Handelsregister ist erforderlich'
        }
    )

    tax_number = forms.CharField(
        label="Steuernummer",
        max_length=20,
        required=True,
        validators=[
            RegexValidator(
                regex=r'^\d{1,3}/\d{3}/\d{4,5}$',
                message="Geben Sie eine g√ºltige Steuernummer ein (Format: 12/345/67890)."
            )
        ],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '12/345/67890'
        }),
        error_messages={
            'required': 'Steuernummer ist erforderlich'
        }
    )

    vat_id = forms.CharField(
        label="USt-IdNr.",
        max_length=15,
        required=True,
        validators=[
            RegexValidator(
                regex=r'^DE\d{9}$',
                message='Format: DE123456789'
            )
        ],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'DE123456789'
        }),
        error_messages={
            'required': 'USt-IdNr. ist erforderlich'
        }
    )

    tax_id = forms.CharField(
        label="Steuer-ID",
        max_length=11,
        required=True,
        validators=[
            RegexValidator(
                regex=r'^\d{11}$',
                message='11-stellige Steuer-ID erforderlich'
            )
        ],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '12345678901'
        }),
        error_messages={
            'required': 'Steuer-ID ist erforderlich'
        }
    )


class CompanyAddressForm(forms.Form):
    """–®–∞–≥ 3: –ê–¥—Ä–µ—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""

    street = forms.CharField(
        label="Stra√üe und Hausnummer",
        max_length=100,
        validators=[
            RegexValidator(
                regex=r'^[a-zA-Z√§√∂√º√Ñ√ñ√ú√ü0-9\s\.\-,]+$',
                message='Stra√üe darf nur Buchstaben, Zahlen und g√§ngige Zeichen enthalten'
            )
        ],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Musterstra√üe 123'
        })
    )

    postal_code = forms.CharField(
        label="PLZ",
        max_length=5,
        min_length=5,
        validators=[
            RegexValidator(
                regex=r'^\d{5}$',
                message='PLZ muss 5 Ziffern haben'
            )
        ],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '12345'
        })
    )

    city = forms.CharField(
        label="Stadt",
        max_length=100,
        validators=[
            RegexValidator(
                regex=r'^[a-zA-Z√§√∂√º√Ñ√ñ√ú√ü\s\-]+$',
                message='Stadt darf nur Buchstaben, Leerzeichen und Bindestriche enthalten'
            )
        ],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Musterstadt'
        })
    )

    country = forms.ChoiceField(
        label="Land",
        choices=[],  # –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        required=True,
        widget=forms.Select(attrs={
            'class': 'form-control'
        })
    )

    address_addition = forms.CharField(
        label="Adresszusatz",
        max_length=100,
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'z.B. 2. Stock, Geb√§ude A (optional)'
        })
    )

    po_box = forms.CharField(
        label="Postfach",
        max_length=50,
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'z.B. Postfach 123456 (optional)'
        })
    )

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –∏–∑ MongoDB
        country_choices = get_countries_from_mongodb()
        self.fields['country'].choices = country_choices


class CompanyContactForm(forms.Form):
    """–®–∞–≥ 4: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""

    email = forms.EmailField(
        label="Haupt-E-Mail",
        max_length=100,
        widget=forms.EmailInput(attrs={
            'class': 'form-control',
            'placeholder': 'kontakt@firma.de'
        })
    )

    phone = forms.CharField(
        label="Haupttelefon",
        max_length=20,
        validators=[
            RegexValidator(
                regex=r'^[\+]?[0-9\s\-\(\)]{7,20}$',
                message='Ung√ºltiges Telefonformat'
            )
        ],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '+49 123 456789'
        })
    )

    fax = forms.CharField(
        label="Fax",
        max_length=20,
        required=False,
        validators=[
            RegexValidator(
                regex=r'^[\+]?[0-9\s\-\(\)]{7,20}$',
                message='Ung√ºltiges Faxformat'
            )
        ],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '+49 123 456789'
        })
    )

    website = forms.URLField(
        label="Website",
        max_length=200,
        required=False,
        widget=forms.URLInput(attrs={
            'class': 'form-control',
            'placeholder': 'https://www.firma.de'
        })
    )


class CompanyBankingForm(forms.Form):
    """–®–∞–≥ 5 - –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""

    # –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç
    bank_name = forms.CharField(
        label="Name der Bank",
        max_length=100,
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'z.B. Deutsche Bank AG'
        })
    )

    iban = forms.CharField(
        label="IBAN",
        max_length=34,
        required=False,
        validators=[
            RegexValidator(
                regex=r'^[A-Z]{2}\d{2}[A-Z0-9]{4}\d{7}([A-Z0-9]?){0,16}$',
                message='Ung√ºltiges IBAN-Format (z.B. DE89370400440532013000)'
            )
        ],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'DE89370400440532013000',
            'style': 'text-transform: uppercase;'
        })
    )

    bic = forms.CharField(
        label="BIC/SWIFT",
        max_length=11,
        required=False,
        validators=[
            RegexValidator(
                regex=r'^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$',
                message='Ung√ºltiges BIC-Format (z.B. DEUTDEFF)'
            )
        ],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'DEUTDEFF',
            'style': 'text-transform: uppercase;'
        })
    )

    account_holder = forms.CharField(
        label="Kontoinhaber",
        max_length=100,
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Name des Kontoinhabers'
        })
    )

    # Zus√§tzliche Informationen
    bank_address = forms.CharField(
        label="Adresse der Bank",
        max_length=200,
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Stra√üe, PLZ Stadt (optional)'
        })
    )

    account_type = forms.ChoiceField(
        label="Kontotyp",
        choices=[
            ('', '-- Ausw√§hlen --'),
            ('geschaeft', 'Gesch√§ftskonto'),
            ('haupt', 'Hauptkonto'),
            ('liquiditaet', 'Liquidit√§tskonto'),
            ('kredit', 'Kreditkonto'),
            ('tagesgeld', 'Tagesgeldkonto'),
            ('sonstige', 'Sonstige'),
        ],
        required=False,
        widget=forms.Select(attrs={
            'class': 'form-control'
        })
    )

    # Sekund√§re Bankverbindung (falls vorhanden)
    secondary_bank_name = forms.CharField(
        label="Zweitbank (optional)",
        max_length=100,
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'z.B. Commerzbank AG'
        })
    )

    secondary_iban = forms.CharField(
        label="IBAN (Zweitbank)",
        max_length=34,
        required=False,
        validators=[
            RegexValidator(
                regex=r'^[A-Z]{2}\d{2}[A-Z0-9]{4}\d{7}([A-Z0-9]?){0,16}$',
                message='Ung√ºltiges IBAN-Format'
            )
        ],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'DE89370400440532013001',
            'style': 'text-transform: uppercase;'
        })
    )

    secondary_bic = forms.CharField(
        label="BIC/SWIFT (Zweitbank)",
        max_length=11,
        required=False,
        validators=[
            RegexValidator(
                regex=r'^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$',
                message='Ung√ºltiges BIC-Format'
            )
        ],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'COBADEFF',
            'style': 'text-transform: uppercase;'
        })
    )

    # Einstellungen
    is_primary_account = forms.BooleanField(
        label="Als Hauptkonto f√ºr Rechnungen verwenden",
        required=False,
        initial=True,
        help_text="Diese Bankverbindung wird standardm√§√üig auf Rechnungen angezeigt",
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    enable_sepa = forms.BooleanField(
        label="SEPA-Lastschriftverfahren aktiviert",
        required=False,
        initial=False,
        help_text="Erm√∂glicht Lastschrifteinzug von Kunden",
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    banking_notes = forms.CharField(
        label="Notizen zu Bankverbindungen",
        max_length=500,
        required=False,
        widget=forms.Textarea(attrs={
            'class': 'form-control',
            'rows': 3,
            'placeholder': 'Zus√§tzliche Informationen zu den Bankverbindungen (optional)'
        })
    )

    def clean_iban(self):
        iban = self.cleaned_data.get('iban', '').replace(' ', '').upper()
        if iban and not self.validate_iban_checksum(iban):
            raise forms.ValidationError('IBAN-Pr√ºfsumme ist ung√ºltig')
        return iban

    def clean_secondary_iban(self):
        iban = self.cleaned_data.get('secondary_iban', '').replace(' ', '').upper()
        if iban and not self.validate_iban_checksum(iban):
            raise forms.ValidationError('IBAN-Pr√ºfsumme ist ung√ºltig')
        return iban

    def validate_iban_checksum(self, iban):
        """Einfache IBAN-Validierung (Mod-97-Pr√ºfung)"""
        if len(iban) < 15:
            return False

        try:
            # Bewege die ersten 4 Zeichen ans Ende
            rearranged = iban[4:] + iban[:4]

            # Ersetze Buchstaben durch Zahlen (A=10, B=11, etc.)
            numeric = ''
            for char in rearranged:
                if char.isdigit():
                    numeric += char
                else:
                    numeric += str(ord(char) - ord('A') + 10)

            # Mod 97 Pr√ºfung
            return int(numeric) % 97 == 1
        except:
            return False


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
class AdditionalCompanyContactForm(forms.Form):
    """–§–æ—Ä–º–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ)"""

    contact_type = forms.ChoiceField(
        label="Kontakttyp",
        choices=[],  # –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ MongoDB
        required=True,
        widget=forms.Select(attrs={
            'class': 'form-control',
            'id': 'contactType'
        })
    )

    contact_value = forms.CharField(
        label="Kontaktdaten",
        max_length=200,
        required=True,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Kontaktdaten eingeben...',
            'id': 'contactValue'
        })
    )

    contact_department = forms.ChoiceField(
        label="Abteilung",
        choices=[
            ('', '-- Abteilung ausw√§hlen --'),
            ('management', 'Gesch√§ftsf√ºhrung'),
            ('sales', 'Vertrieb'),
            ('support', 'Kundensupport'),
            ('accounting', 'Buchhaltung'),
            ('hr', 'Personalabteilung'),
            ('it', 'IT-Abteilung'),
            ('marketing', 'Marketing'),
            ('production', 'Produktion'),
            ('logistics', 'Logistik'),
            ('purchasing', 'Einkauf'),
            ('quality', 'Qualit√§tsmanagement'),
            ('legal', 'Rechtsabteilung'),
            ('reception', 'Empfang/Zentrale'),
            ('other', 'Sonstige')
        ],
        required=False,
        widget=forms.Select(attrs={
            'class': 'form-control',
            'id': 'contactLabel'
        })
    )

    contact_important = forms.BooleanField(
        label="Als wichtig markieren",
        required=False,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input',
            'id': 'contactImportant'
        })
    )

    contact_public = forms.BooleanField(
        label="√ñffentlich sichtbar",
        required=False,
        help_text="Kann auf der Webseite angezeigt werden",
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input',
            'id': 'contactPublic'
        })
    )

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ MongoDB
        contact_type_choices = get_communication_types_from_mongodb()
        self.fields['contact_type'].choices = contact_type_choices