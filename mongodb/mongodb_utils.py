# mongodb/mongodb_utils.py - –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ MongoDB –æ–±—ä–µ–∫—Ç–æ–≤

import datetime
import json
import os

import pymongo
from pymongo.errors import ConnectionFailure, OperationFailure
from urllib.parse import quote_plus

from .mongodb_config import MongoConfig, verify_password
from loguru import logger

from . import language


class MongoConnection:
    _instance = None
    _client = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(MongoConnection, cls).__new__(cls)
        return cls._instance

    @classmethod
    def get_client(cls):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç MongoDB –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if cls._client is None:
            config = MongoConfig.read_config()
            if not config:
                logger.error("Konfigurationsdatei f√ºr die Datenbankverbindung nicht gefunden")
                return None

            host = config.get('host')
            port = config.get('port')
            admin_user = config.get('admin_user')
            admin_password = config.get('admin_password')
            db_name = config.get('db_name')

            if host and port:
                try:
                    if admin_user and admin_password:
                        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è URL
                        escaped_password = quote_plus(admin_password)
                        connection_string = f"mongodb://{admin_user}:{escaped_password}@{host}:{port}/admin"
                        logger.info(f"üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {admin_user}")
                    else:
                        connection_string = f"mongodb://{host}:{port}/"
                        logger.warning("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–ï–ó –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")

                    cls._client = pymongo.MongoClient(connection_string, serverSelectionTimeoutMS=5000)
                    cls._client.admin.command('ping')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    logger.success(language.mess_server_auth_success)
                except (ConnectionFailure, OperationFailure) as e:
                    logger.error(f"{language.mess_server_auth_error}: {e}")
                    cls._client = None
        return cls._client

    @classmethod
    def get_database(cls):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        client = cls.get_client()
        if client is not None:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
            config = MongoConfig.read_config()
            db_name = config.get('db_name')
            if db_name:
                return client[db_name]
            logger.error("–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        return None

    @classmethod
    def test_connection(cls, host, port):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º MongoDB"""
        try:
            client = pymongo.MongoClient(f"mongodb://{host}:{port}/", serverSelectionTimeoutMS=5000)
            client.admin.command('ping')
            logger.success(f"{host}:{port} ‚Äî {language.mess_server_ping_success}")
            return True
        except Exception as e:
            logger.error(f"{host}:{port} ‚Äî {language.mess_server_ping_error}: {e}")
            return False

    @classmethod
    def authenticate_admin(cls, username, password):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            config = MongoConfig.read_config()
            host = config.get('host')
            port = config.get('port')

            if not host or not port:
                logger.error("Host –∏ Port –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
                return False

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è URL
            escaped_username = quote_plus(username)
            escaped_password = quote_plus(password)

            auth_client = pymongo.MongoClient(
                f"mongodb://{escaped_username}:{escaped_password}@{host}:{port}/admin",
                serverSelectionTimeoutMS=5000
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            auth_client.admin.command('ping')

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö (—Ç—Ä–µ–±—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤)
                databases = auth_client.list_database_names()
                logger.success(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä '{username}' —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ë–î: {len(databases)}")
                return True
            except OperationFailure as e:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –±–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤: {e}")
                return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞

        except OperationFailure as e:
            error_code = e.details.get('code', 0) if hasattr(e, 'details') else 0
            if error_code == 18:  # Authentication failed
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è '{username}': {language.mess_login_admin_error}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ '{username}': {e}")
            return False
        except ConnectionFailure as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ '{username}': {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ '{username}': {e}")
            return False

    @classmethod
    def create_database_step3(cls, db_name):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
        logger.warning(f"üöÄ === –ù–ê–ß–ê–õ–û create_database_step3 –¥–ª—è –ë–î: {db_name} ===")

        if not db_name:
            logger.error("–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
            return False

        client = cls.get_client()
        if client is None:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç MongoDB")
            return False

        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        config = MongoConfig.read_config()
        admin_user = config.get('admin_user') if config else None

        if not admin_user:
            logger.error("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ mongo_config.env.enc!")
            logger.error("üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ authenticate_admin(username, password)")
            return False

        logger.info(f"üîê –†–∞–±–æ—Ç–∞–µ–º —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {admin_user}")

        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç listDatabases)
            db = client[db_name]

            try:
                existing_collections = db.list_collection_names()
                logger.info(f"üìÇ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ '{db_name}': {existing_collections}")
            except OperationFailure as e:
                if e.code == 13:  # Unauthorized
                    logger.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ '{db_name}'")
                    logger.error(f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ '{admin_user}' –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —ç—Ç—É –±–∞–∑—É")
                    return False
                raise
            except Exception as e:
                logger.info(f"üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                existing_collections = []

            if existing_collections:
                logger.warning(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({len(existing_collections)} –∫–æ–ª–ª–µ–∫—Ü–∏–π)")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                users_collection = f"{db_name}_users"
                titles_collection = f"{db_name}_basic_titles"

                required_collections = [users_collection, titles_collection]
                missing_collections = [col for col in required_collections if col not in existing_collections]

                if not missing_collections:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
                    users_count = db[users_collection].count_documents({})
                    titles_count = db[titles_collection].count_documents({})

                    if users_count > 0 or titles_count > 0:
                        logger.error(f"üö´ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
                        logger.error(f"üìä {users_collection}: {users_count} –∑–∞–ø–∏—Å–µ–π")
                        logger.error(f"üìä {titles_collection}: {titles_count} –∑–∞–ø–∏—Å–µ–π")
                        logger.error("‚ùå –û–¢–ú–ï–ù–Ø–ï–ú —Å–æ–∑–¥–∞–Ω–∏–µ - –ë–î —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                        return False
                    else:
                        logger.warning(f"‚ö†Ô∏è –ë–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø—É—Å—Ç—ã. –£–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ...")
                        try:
                            client.drop_database(db_name)
                            logger.success(f"‚úÖ –ü—É—Å—Ç–∞—è –±–∞–∑–∞ '{db_name}' —É–¥–∞–ª–µ–Ω–∞")
                        except OperationFailure as e:
                            if e.code == 13:
                                logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–∑—ã")
                                return False
                            raise
                else:
                    logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {missing_collections}")
                    logger.warning(f"‚ö†Ô∏è –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—É—é –±–∞–∑—É '{db_name}' –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞...")
                    try:
                        client.drop_database(db_name)
                        logger.success(f"‚úÖ –ù–µ–ø–æ–ª–Ω–∞—è –±–∞–∑–∞ '{db_name}' —É–¥–∞–ª–µ–Ω–∞")
                    except OperationFailure as e:
                        if e.code == 13:
                            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–∑—ã")
                            return False
                        raise

            # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –±–∞–∑—É —Å –Ω—É–ª—è
            logger.success(f"‚úÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö '{db_name}'...")
            db = client[db_name]
            now = datetime.datetime.now()

            # –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª–∞–º
            base_path = os.path.join('static', 'defaults', 'data')
            logger.info(f"üìÇ –ò—â–µ–º JSON —Ñ–∞–π–ª—ã –≤: {base_path}")

            created_collections = []

            if os.path.exists(base_path):
                json_files = [f for f in os.listdir(base_path) if f.endswith('.json')]
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª–æ–≤: {json_files}")

                for file_name in json_files:
                    base_collection_name = file_name.replace('.json', '')
                    collection_name = f"{db_name}_{base_collection_name}"
                    json_path = os.path.join(base_path, file_name)

                    logger.warning(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_name} ‚Üí –∫–æ–ª–ª–µ–∫—Ü–∏—è: {collection_name}")

                    try:
                        with open(json_path, 'r', encoding='utf-8') as file:
                            data = json.load(file)
                        logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data) if isinstance(data, list) else 1} –∑–∞–ø–∏—Å–µ–π –∏–∑ {file_name}")

                        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
                        db.create_collection(collection_name)
                        logger.success(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —Å–æ–∑–¥–∞–Ω–∞")

                        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                        if isinstance(data, list):
                            if data:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                                for item in data:
                                    item['created_at'] = now
                                    item['modified_at'] = now
                                    item['deleted'] = False
                                result = db[collection_name].insert_many(data)
                                inserted_count = len(result.inserted_ids)
                                logger.success(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {inserted_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ '{collection_name}'")
                            else:
                                logger.info(f"üìù –ü—É—Å—Ç–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —Å–æ–∑–¥–∞–Ω–∞")
                        else:
                            data['created_at'] = now
                            data['modified_at'] = now
                            data['deleted'] = False
                            result = db[collection_name].insert_one(data)
                            logger.success(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω 1 –¥–æ–∫—É–º–µ–Ω—Ç –≤ '{collection_name}'")

                        created_collections.append(collection_name)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        final_count = db[collection_name].count_documents({})
                        logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ '{collection_name}': {final_count}")

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_name}: {e}")
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å—ë
                        logger.error("üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
                        try:
                            client.drop_database(db_name)
                        except:
                            pass
                        return False

            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
            users_collection_name = f"{db_name}_users"
            if users_collection_name not in created_collections:
                logger.warning(f"‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è users –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ JSON, —Å–æ–∑–¥–∞–µ–º –≤—Ä—É—á–Ω—É—é...")
                db.create_collection(users_collection_name)
                logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è '{users_collection_name}'")

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_collection = db[users_collection_name]
            try:
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
                try:
                    users_collection.create_index("username", unique=True, name="idx_username_unique")
                    logger.success("‚úÖ –°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è username")
                except Exception as e:
                    users_collection.create_index("username", name="idx_username")
                    logger.warning(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –æ–±—ã—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è username: {e}")

                try:
                    users_collection.create_index("profile.email", unique=True, name="idx_email_unique")
                    logger.success("‚úÖ –°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è email")
                except Exception as e:
                    users_collection.create_index("profile.email", name="idx_email")
                    logger.warning(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –æ–±—ã—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è email: {e}")

                # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
                users_collection.create_index([("is_active", 1), ("deleted", 1)], name="idx_active_not_deleted")
                users_collection.create_index([("is_admin", 1), ("deleted", 1)], name="idx_admin_not_deleted")
                users_collection.create_index("created_at", name="idx_created_at")
                logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è '{users_collection_name}'")

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")

            # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            system_collection_name = f"{db_name}_system_info"
            db[system_collection_name].insert_one({
                'database_name': db_name,
                'created_at': now,
                'version': '1.0',
                'status': 'active',
                'collections_count': len(db.list_collection_names())
            })
            logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è '{system_collection_name}'")

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            final_collections = db.list_collection_names()
            logger.success(f"üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            logger.info(f"üìä –í—Å–µ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {len(final_collections)}")

            for coll_name in final_collections:
                count = db[coll_name].count_documents({})
                logger.info(f"  üìÇ {coll_name}: {count} –∑–∞–ø–∏—Å–µ–π")

            return True

        except OperationFailure as e:
            if e.code == 13:  # Unauthorized
                logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                logger.error(f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ '{admin_user}' –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ dbAdmin –∏–ª–∏ root")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ MongoDB: {e}")

            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å
            try:
                client.drop_database(db_name)
                logger.warning(f"üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
            except:
                pass
            return False

        except Exception as e:
            logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î '{db_name}': {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            try:
                client.drop_database(db_name)
                logger.warning(f"üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
            except:
                pass
            return False

    @classmethod
    def authenticate_user(cls, username, password):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        config = MongoConfig.read_config()
        if not config:
            logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return False

        client = cls.get_client()
        if client is None:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
            return False

        db_name = config.get('db_name')
        if not db_name:
            logger.error("–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return False

        try:
            db = client[db_name]

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_collection_name = f"{db_name}_users"
            user = db[users_collection_name].find_one({'username': username, 'deleted': False})

            if user is not None and verify_password(password, user['password']):  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
                logger.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
                return user
            else:
                logger.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}': {e}")
            return False

    @classmethod
    def database_exists(cls, db_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ –ø—Ä–∞–≤ listDatabases)"""
        client = cls.get_client()
        if client is None:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç MongoDB")
            return False

        try:
            # –í–º–µ—Å—Ç–æ list_database_names() –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π
            db = client[db_name]
            collections = db.list_collection_names()

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è, –±–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            exists = len(collections) > 0

            if exists:
                logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({len(collections)} –∫–æ–ª–ª–µ–∫—Ü–∏–π)")
            else:
                logger.info(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞")

            return exists

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã '{db_name}': {e}")
            return False