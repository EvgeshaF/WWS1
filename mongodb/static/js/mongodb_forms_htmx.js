// –û–±—â–∏–π JS –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º MongoDB —Å HTMX –∏ toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
(function() {
    'use strict';

    console.log('üîß MongoDB Forms HTMX Module –∑–∞–≥—Ä—É–∂–µ–Ω');

    // –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    class ProgressManager {
        constructor(config) {
            this.submitBtn = config.submitBtn;
            this.progressLabel = config.progressLabel;
            this.progressBar = config.progressBar;
            this.progressBarContainer = config.progressBarContainer;
            this.originalBtnText = config.originalBtnText;
            this.processingBtnText = config.processingBtnText;
            this.progressInterval = null;
        }

        show() {
            if (!this.submitBtn || !this.progressLabel || !this.progressBarContainer || !this.progressBar) {
                console.warn('‚ö†Ô∏è –ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }

            this.submitBtn.disabled = true;
            this.submitBtn.innerHTML = `<span class="spinner-border spinner-border-sm me-2" role="status"></span>${this.processingBtnText}`;

            this.progressLabel.style.visibility = 'visible';
            this.progressBarContainer.style.visibility = 'visible';

            let progress = 0;
            this.progressInterval = setInterval(() => {
                progress += Math.random() * 15;
                if (progress > 90) progress = 90;
                this.progressBar.style.width = progress + '%';
            }, 200);

            console.log('üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ–∫–∞–∑–∞–Ω');
        }

        hide() {
            if (!this.submitBtn || !this.progressLabel || !this.progressBarContainer || !this.progressBar) {
                return;
            }

            if (this.progressInterval) {
                clearInterval(this.progressInterval);
                this.progressInterval = null;
            }

            this.submitBtn.disabled = false;
            this.submitBtn.innerHTML = this.originalBtnText;

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            this.progressBar.style.width = '100%';

            setTimeout(() => {
                this.progressLabel.style.visibility = 'hidden';
                this.progressBarContainer.style.visibility = 'hidden';
                this.progressBar.style.width = '0%';
            }, 500);

            console.log('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å–∫—Ä—ã—Ç');
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º MongoDB
    function initializeMongoDBForms() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB —Ñ–æ—Ä–º...');

        // –®–∞–≥ 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        const step1Form = document.getElementById('mongo-form');
        if (step1Form) {
            console.log('üìù –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ Step 1');
            const progressManager = new ProgressManager({
                submitBtn: step1Form.querySelector('button[type="submit"]'),
                progressLabel: document.getElementById('progress-label'),
                progressBar: document.getElementById('connection-progress'),
                progressBarContainer: document.getElementById('progress-bar-container'),
                originalBtnText: '<i class="bi bi-wifi me-1"></i>Verbindung pr√ºfen',
                processingBtnText: 'Wird gepr√ºft...'
            });

            step1Form.addEventListener('htmx:beforeRequest', function() {
                console.log('üì§ Step 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
                progressManager.show();
            });

            step1Form.addEventListener('htmx:afterRequest', function(event) {
                console.log('üì• Step 1: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
                progressManager.hide();
                // –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–¥–µ—Å—å - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            });
        }

        // –®–∞–≥ 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        const step2Form = document.getElementById('mongo-login-form');
        if (step2Form) {
            console.log('üìù –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ Step 2');
            const progressManager = new ProgressManager({
                submitBtn: step2Form.querySelector('button[type="submit"]'),
                progressLabel: document.getElementById('auth-progress-label'),
                progressBar: document.getElementById('auth-progress'),
                progressBarContainer: document.getElementById('auth-progress-bar-container'),
                originalBtnText: '<i class="bi bi-box-arrow-in-right me-1"></i>Anmelden',
                processingBtnText: 'Authentifizierung l√§uft...'
            });

            step2Form.addEventListener('htmx:beforeRequest', function() {
                console.log('üì§ Step 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
                progressManager.show();
            });

            step2Form.addEventListener('htmx:afterRequest', function() {
                console.log('üì• Step 2: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
                progressManager.hide();
            });
        }

        // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –ë–î
        const step3Form = document.getElementById('create-db-form');
        if (step3Form) {
            console.log('üìù –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ Step 3');
            const progressManager = new ProgressManager({
                submitBtn: step3Form.querySelector('button[type="submit"]'),
                progressLabel: document.getElementById('db-progress-label'),
                progressBar: document.getElementById('db-progress'),
                progressBarContainer: document.getElementById('db-progress-bar-container'),
                originalBtnText: '<i class="bi bi-database-add me-1"></i>Datenbank erstellen',
                processingBtnText: 'Datenbank wird erstellt...'
            });

            step3Form.addEventListener('htmx:beforeRequest', function() {
                console.log('üì§ Step 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
                progressManager.show();
            });

            step3Form.addEventListener('htmx:afterRequest', function() {
                console.log('üì• Step 3: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
                progressManager.hide();
            });
        }
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è HTMX —Å–æ–±—ã—Ç–∏–π —Å toast-—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    // –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º capture phase, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –ü–ï–†–í–´–ú–ò
    document.body.addEventListener('htmx:afterRequest', function(event) {
        console.log('üîî MongoDB HTMX afterRequest event', event.detail);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ä–º–∞ MongoDB
        const formElement = event.detail.elt;
        if (!formElement || !formElement.id || (!formElement.id.includes('mongo') && !formElement.id.includes('create-db'))) {
            console.log('‚ùå –ù–µ MongoDB —Ñ–æ—Ä–º–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º. ID:', formElement?.id);
            return; // –ù–µ –Ω–∞—à–∞ —Ñ–æ—Ä–º–∞
        }

        console.log('‚úÖ MongoDB —Ñ–æ—Ä–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º');

        // –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –¥–ª—è MongoDB —Ñ–æ—Ä–º
        // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ toasts.js
        event.detail.mongodbHandled = true;

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        event.stopImmediatePropagation();

        try {
            const response = JSON.parse(event.detail.xhr.response);
            console.log('üì¶ Parsed response:', response);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if (response.messages && Array.isArray(response.messages)) {
                console.log(`üí¨ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ${response.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                const hasSuccess = response.messages.some(msg => msg.tags === 'success');
                const redirectDelay = hasSuccess && response.redirect_url ? 2500 : 5000;

                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–µ–ª–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç
                if (hasSuccess && response.redirect_url) {
                    console.log(`üîÄ –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: ${response.redirect_url}`);
                    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ${response.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);

                    // –°–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –≤ Django session, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
                    // Django messages –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —á–µ—Ä–µ–∑ base.html
                    window.location.href = response.redirect_url;
                } else {
                    // –ù–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º toast –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    response.messages.forEach(function(message) {
                        if (window.showToast) {
                            window.showToast(message.text, message.tags, message.delay || 5000);
                        } else {
                            console.error('‚ùå window.showToast –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!');
                        }
                    });
                }
            }
        } catch (e) {
            // –ù–µ JSON –æ—Ç–≤–µ—Ç
            const contentType = event.detail.xhr.getResponseHeader('Content-Type');
            if (contentType && contentType.includes('application/json')) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e);
                if (window.showToast) {
                    window.showToast('Fehler beim Verarbeiten der Serverantwort', 'error');
                }
            }
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ HTMX
    document.body.addEventListener('htmx:responseError', function(event) {
        console.error('‚ùå HTMX Response Error:', event.detail);
        if (window.showToast) {
            window.showToast('Serverfehler aufgetreten', 'error');
        }
    });

    document.body.addEventListener('htmx:sendError', function(event) {
        console.error('‚ùå HTMX Send Error:', event.detail);
        if (window.showToast) {
            window.showToast('Verbindungsfehler', 'error');
        }
    });

    document.body.addEventListener('htmx:timeout', function(event) {
        console.error('‚è±Ô∏è HTMX Timeout:', event.detail);
        if (window.showToast) {
            window.showToast('Anfrage-Zeit√ºberschreitung', 'warning');
        }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeMongoDBForms);
    } else {
        initializeMongoDBForms();
    }

    console.log('‚úÖ MongoDB Forms HTMX Module –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

})();