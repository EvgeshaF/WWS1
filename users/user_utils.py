# users/user_utils.py - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import datetime
from typing import Optional, Dict, Any, List
from loguru import logger
from django.contrib.auth.hashers import make_password, check_password
from mongodb.mongodb_config import MongoConfig
from mongodb.mongodb_utils import MongoConnection
from pymongo.errors import DuplicateKeyError, ConnectionFailure, OperationFailure


class UserManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ MongoDB"""

    def __init__(self):
        logger.debug("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserManager")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        self.db = MongoConnection.get_database()
        if self.db is None:
            logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            self.users_collection_name = None
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        config = MongoConfig.read_config()
        db_name = config.get('db_name')
        if not db_name:
            logger.error("‚ùå –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            self.users_collection_name = None
        else:
            self.users_collection_name = f"{db_name}_users"
            logger.info(f"‚úÖ –ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {self.users_collection_name}")

    def get_collection(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        if self.db is None:
            logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return None

        if not self.users_collection_name:
            logger.error("‚ùå –ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
            return None

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
            existing_collections = self.db.list_collection_names()
            logger.debug(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {existing_collections}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è
            if self.users_collection_name not in existing_collections:
                logger.warning(f"‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è '{self.users_collection_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–µ–º...")

                # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
                collection = self.db.create_collection(self.users_collection_name)
                logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{self.users_collection_name}' —Å–æ–∑–¥–∞–Ω–∞")

                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                try:
                    collection.create_index("username", unique=True, name="idx_username_unique")
                    collection.create_index("profile.email", unique=True, sparse=True, name="idx_email_unique")
                    collection.create_index([("is_active", 1), ("deleted", 1)], name="idx_active_not_deleted")
                    collection.create_index([("is_admin", 1), ("deleted", 1)], name="idx_admin_not_deleted")
                    collection.create_index("created_at", name="idx_created_at")
                    logger.success("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            else:
                logger.debug(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{self.users_collection_name}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
            collection = self.db[self.users_collection_name]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            try:
                collection.count_documents({})
                logger.debug(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{self.users_collection_name}' –¥–æ—Å—Ç—É–ø–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
                return None

            return collection

        except ConnectionFailure as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
            return None
        except OperationFailure as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ MongoDB: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{self.users_collection_name}': {e}")
            return None

    def create_user(self, user_data: Dict[str, Any]) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            logger.info(f"üöÄ –ù–ê–ß–ê–õ–û —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data.get('username')}")

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
            collection = self.get_collection()
            if collection is None:
                logger.error("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not user_data.get('username'):
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: username")
                return False

            username = user_data['username']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
            existing_user = collection.find_one({
                'username': username,
                'deleted': {'$ne': True}
            })

            if existing_user:
                logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
            log_data = {k: v for k, v in user_data.items() if k != 'password'}
            logger.info(f"üìù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞—Ä–æ–ª—è): {log_data}")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            insert_data = user_data.copy()

            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
            now = datetime.datetime.now()
            if 'created_at' not in insert_data:
                insert_data['created_at'] = now
            if 'modified_at' not in insert_data:
                insert_data['modified_at'] = now
            if 'deleted' not in insert_data:
                insert_data['deleted'] = False
            if 'last_login' not in insert_data:
                insert_data['last_login'] = None
            if 'failed_login_attempts' not in insert_data:
                insert_data['failed_login_attempts'] = 0
            if 'locked_until' not in insert_data:
                insert_data['locked_until'] = None
            if 'password_changed_at' not in insert_data:
                insert_data['password_changed_at'] = now

            logger.info(f"üíæ –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç–∞–≤–∫—É –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é: {collection.name}")

            # –í–°–¢–ê–í–õ–Ø–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
            result = collection.insert_one(insert_data)

            logger.info(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏ - inserted_id: {result.inserted_id}")

            if result.inserted_id:
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê ‚Ññ1: –ø–æ–∏—Å–∫ –ø–æ ID
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ _id: {result.inserted_id}")
                verification_by_id = collection.find_one({'_id': result.inserted_id})

                if verification_by_id:
                    logger.success(f"‚úÖ –ù–ê–ô–î–ï–ù –ø–æ _id! Username: {verification_by_id.get('username')}")

                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê ‚Ññ2: –ø–æ–∏—Å–∫ –ø–æ username
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ username: {username}")
                    verification_by_name = collection.find_one({
                        'username': username,
                        'deleted': {'$ne': True}
                    })

                    if verification_by_name:
                        logger.success(f"‚úÖ –ù–ê–ô–î–ï–ù –ø–æ username! ID: {verification_by_name.get('_id')}")

                        # –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–õ–ò–ß–ï–°–¢–í–û –ó–ê–ü–ò–°–ï–ô
                        total_users = collection.count_documents({})
                        active_users = collection.count_documents({'deleted': {'$ne': True}})
                        admin_users = collection.count_documents({
                            'is_admin': True,
                            'deleted': {'$ne': True},
                            'is_active': True
                        })

                        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ={total_users}, –∞–∫—Ç–∏–≤–Ω—ã—Ö={active_users}, –∞–¥–º–∏–Ω–æ–≤={admin_users}")

                        return True
                    else:
                        logger.error(f"‚ùå –ù–ï –ù–ê–ô–î–ï–ù –ø–æ username '{username}' –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!")
                else:
                    logger.error(f"‚ùå –ù–ï –ù–ê–ô–î–ï–ù –ø–æ _id {result.inserted_id} –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å inserted_id")

            return False

        except DuplicateKeyError as e:
            logger.error(f"‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}': {e}")
            return False
        except ConnectionFailure as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}': {e}")
            return False
        except OperationFailure as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}': {e}")
            return False
        except Exception as e:
            logger.exception(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}': {e}")
            return False

    def find_user_by_username(self, username: str) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            logger.debug(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

            collection = self.get_collection()
            if collection is None:
                logger.error("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
                return None

            user = collection.find_one({
                'username': username,
                'deleted': {'$ne': True}
            })

            if user:
                logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–∞–π–¥–µ–Ω")
                return user
            else:
                logger.debug(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                all_users = list(collection.find({}, {'username': 1, 'deleted': 1}))
                logger.debug(f"üîç –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {[u.get('username') for u in all_users]}")

                return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}': {e}")
            return None

    def find_user_by_email(self, email: str) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –≤ profile.email"""
        try:
            collection = self.get_collection()
            if collection is None:
                return None

            user = collection.find_one({
                'profile.email': email,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∏—Å–∫ –≤ profile.email
                'deleted': {'$ne': True}
            })
            return user

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email '{email}': {e}")
            return None

    def authenticate_user(self, username: str, password: str) -> Optional[Dict[str, Any]]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = self.find_user_by_username(username)
            if not user:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            if not user.get('is_active', False):
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            locked_until = user.get('locked_until')
            if locked_until and locked_until > datetime.datetime.now():
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {locked_until}")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            if check_password(password, user['password']):
                self._update_login_success(username)
                logger.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return user
            else:
                self._update_login_failure(username)
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}'")
                return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}': {e}")
            return None

    def get_admin_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            logger.debug("–ü–æ–¥—Å—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...")

            collection = self.get_collection()
            if collection is None:
                logger.error("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞")
                return 0

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admin_query = {
                'is_admin': True,
                'deleted': {'$ne': True},
                'is_active': True
            }

            count = collection.count_documents(admin_query)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {count}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            total_count = collection.count_documents({})
            admin_all_count = collection.count_documents({'is_admin': True})
            active_count = collection.count_documents({'is_active': True, 'deleted': {'$ne': True}})

            logger.debug(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ={total_count}, –∞–¥–º–∏–Ω–æ–≤_–≤—Å–µ–≥–æ={admin_all_count}, –∞–∫—Ç–∏–≤–Ω—ã—Ö={active_count}")

            return count

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return 0

    def authenticate_user(self, username: str, password: str) -> Optional[Dict[str, Any]]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = self.find_user_by_username(username)
            if not user:
                logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            if not user.get('is_active', False):
                logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            locked_until = user.get('locked_until')
            if locked_until and locked_until > datetime.datetime.now():
                logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {locked_until}")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            if check_password(password, user['password']):
                self._update_login_success(username)
                logger.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return user
            else:
                self._update_login_failure(username)
                logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}'")
                return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}': {e}")
            return None

    def update_user(self, username: str, update_data: Dict[str, Any]) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            collection = self.get_collection()
            if collection is None:
                return False

            update_data['modified_at'] = datetime.datetime.now()

            result = collection.update_one(
                {'username': username, 'deleted': {'$ne': True}},
                {'$set': update_data}
            )

            if result.modified_count > 0:
                logger.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}' –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                return True
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}': {e}")
            return False

    def delete_user(self, username: str, soft_delete: bool = True) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            collection = self.get_collection()
            if collection is None:
                return False

            if soft_delete:
                result = collection.update_one(
                    {'username': username, 'deleted': {'$ne': True}},
                    {
                        '$set': {
                            'deleted': True,
                            'modified_at': datetime.datetime.now(),
                            'is_active': False
                        }
                    }
                )
                success = result.modified_count > 0
                action = "–ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π"
            else:
                result = collection.delete_one({'username': username})
                success = result.deleted_count > 0
                action = "—É–¥–∞–ª–µ–Ω"

            if success:
                logger.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' {action}")
                return True
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}': {e}")
            return False

    def list_users(self, include_deleted: bool = False,
                   admin_only: bool = False,
                   active_only: bool = True) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            collection = self.get_collection()
            if collection is None:
                return []

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä
            query = {}
            if not include_deleted:
                query['deleted'] = {'$ne': True}
            if admin_only:
                query['is_admin'] = True
            if active_only:
                query['is_active'] = True

            users = list(collection.find(
                query,
                {'password': 0}  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞—Ä–æ–ª—å
            ).sort('username', 1))

            logger.debug(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            return users

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def _update_login_success(self, username: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
        try:
            collection = self.get_collection()
            if collection is not None:
                collection.update_one(
                    {'username': username},
                    {
                        '$set': {
                            'last_login': datetime.datetime.now(),
                            'failed_login_attempts': 0,
                            'locked_until': None
                        }
                    }
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞ –¥–ª—è '{username}': {e}")

    def _update_login_failure(self, username: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
        try:
            collection = self.get_collection()
            if collection is not None:
                result = collection.update_one(
                    {'username': username},
                    {'$inc': {'failed_login_attempts': 1}}
                )

                if result.modified_count > 0:
                    user = collection.find_one({'username': username})
                    if user and user.get('failed_login_attempts', 0) >= 5:
                        locked_until = datetime.datetime.now() + datetime.timedelta(minutes=15)
                        collection.update_one(
                            {'username': username},
                            {'$set': {'locked_until': locked_until}}
                        )
                        logger.warning(f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {locked_until}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –¥–ª—è '{username}': {e}")

    def get_admin_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            logger.debug("üìä –ü–æ–¥—Å—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...")

            collection = self.get_collection()
            if collection is None:
                logger.error("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞")
                return 0

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admin_query = {
                'is_admin': True,
                'deleted': {'$ne': True},
                'is_active': True
            }

            count = collection.count_documents(admin_query)
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {count}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            total_count = collection.count_documents({})
            admin_all_count = collection.count_documents({'is_admin': True})
            active_count = collection.count_documents({'is_active': True, 'deleted': {'$ne': True}})

            logger.debug(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ={total_count}, –∞–¥–º–∏–Ω–æ–≤_–≤—Å–µ–≥–æ={admin_all_count}, –∞–∫—Ç–∏–≤–Ω—ã—Ö={active_count}")

            return count

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return 0

    def get_collection_stats(self) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        try:
            collection = self.get_collection()
            if collection is None:
                return {}

            stats = {
                'total_users': collection.count_documents({}),
                'active_users': collection.count_documents({'is_active': True, 'deleted': {'$ne': True}}),
                'admin_users': collection.count_documents({'is_admin': True, 'deleted': {'$ne': True}, 'is_active': True}),
                'deleted_users': collection.count_documents({'deleted': True}),
                'locked_users': collection.count_documents({'locked_until': {'$gt': datetime.datetime.now()}})
            }

            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {stats}")
            return stats

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def reset_failed_attempts(self, username: str) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞"""
        try:
            collection = self.get_collection()
            if not collection:
                return False

            result = collection.update_one(
                {'username': username},
                {
                    '$set': {
                        'failed_login_attempts': 0,
                        'locked_until': None
                    }
                }
            )

            if result.modified_count > 0:
                logger.success(f"‚úÖ –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è '{username}' —Å–±—Ä–æ—à–µ–Ω—ã")
                return True
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è '{username}': {e}")
            return False

    def change_password(self, username: str, new_password: str) -> bool:
        """–ò–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            collection = self.get_collection()
            if not collection:
                return False

            hashed_password = make_password(new_password)
            result = collection.update_one(
                {'username': username, 'deleted': {'$ne': True}},
                {
                    '$set': {
                        'password': hashed_password,
                        'password_changed_at': datetime.datetime.now(),
                        'modified_at': datetime.datetime.now()
                    }
                }
            )

            if result.modified_count > 0:
                logger.success(f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è '{username}' –∏–∑–º–µ–Ω–µ–Ω")
                return True
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è '{username}': {e}")
            return False
