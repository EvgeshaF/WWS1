# users/views.py - –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

from django.shortcuts import render, redirect
from django.contrib import messages
from django.http import JsonResponse
from django.urls import reverse
from django.contrib.auth.hashers import make_password, check_password
from django.views.decorators.http import require_http_methods
from django.views.decorators.cache import never_cache
from loguru import logger
import datetime
import json

from .forms import (
    LoginForm, CreateAdminUserForm, AdminProfileForm,
    AdminPermissionsForm, get_communication_types_from_mongodb,
    get_communication_config_from_mongodb
)
from .user_utils import UserManager
from . import language
from django_ratelimit.decorators import ratelimit


def is_user_authenticated(request):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        user_authenticated = request.session.get('user_authenticated', False)
        if user_authenticated:
            username = request.session.get('username')
            if username:
                user_manager = UserManager()
                user_data = user_manager.find_user_by_username(username)
                if user_data and user_data.get('is_active', False):
                    return True, user_data
                else:
                    clear_user_session(request)
                    return False, None
        return False, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False, None


def clear_user_session(request):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏"""
    session_keys = ['user_authenticated', 'user_id', 'username', 'is_admin', 'user_data']
    for key in session_keys:
        if key in request.session:
            del request.session[key]
    request.session.modified = True


def should_show_login_modal():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞"""
    try:
        user_manager = UserManager()
        admin_count = user_manager.get_admin_count()
        return admin_count > 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
        return False


@ratelimit(key='ip', rate='5/m', method='POST')
@require_http_methods(["GET"])
def login_page_view(request):
    """–û—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –º–æ–¥–∞–ª—å–Ω–æ–º—É –æ–∫–Ω—É)"""
    try:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        is_auth, _ = is_user_authenticated(request)
        if is_auth:
            return redirect('home')

        form = LoginForm()

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            user_manager = UserManager()
            admin_count = user_manager.get_admin_count()
        except Exception:
            admin_count = 0

        context = {
            'form': form,
            'admin_count': admin_count,
            'system_version': '1.0.0'
        }

        return render(request, 'users/login_page.html', context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ login_page_view: {e}")
        messages.error(request, "Ein Fehler ist aufgetreten")
        return redirect('home')


@require_http_methods(["GET", "POST"])
@never_cache
def login_view(request):
    """–§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AJAX –∏ –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        if request.method == "POST":
            logger.info("üîê –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Ö–æ–¥–∞")

            is_ajax = request.headers.get('X-Requested-With') == 'XMLHttpRequest'

            username = request.POST.get("username", "").strip()
            password = request.POST.get("password", "")
            remember_me = request.POST.get("remember_me") == "on"

            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {username}, AJAX: {is_ajax}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not username:
                error_message = "Benutzername ist erforderlich"
                if is_ajax:
                    return JsonResponse({'success': False, 'message': error_message})
                else:
                    messages.error(request, error_message)
                    form = LoginForm(request.POST)
                    return render(request, 'users/login_page.html', {'form': form})

            if not password:
                error_message = "Passwort ist erforderlich"
                if is_ajax:
                    return JsonResponse({'success': False, 'message': error_message})
                else:
                    messages.error(request, error_message)
                    form = LoginForm(request.POST)
                    return render(request, 'users/login_page.html', {'form': form})

            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            user_manager = UserManager()
            user = user_manager.authenticate_user(username, password)

            if user:
                logger.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏
                request.session["user_authenticated"] = True
                request.session["user_id"] = str(user["_id"])
                request.session["username"] = user["username"]
                request.session["is_admin"] = user.get("is_admin", False)
                request.session["user_data"] = {
                    'username': user['username'],
                    'is_admin': user.get('is_admin', False),
                    'is_active': user.get('is_active', True),
                    'profile': user.get('profile', {})
                }

                if remember_me:
                    request.session.set_expiry(1209600)  # 2 –Ω–µ–¥–µ–ª–∏
                else:
                    request.session.set_expiry(0)  # –î–æ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞

                request.session.modified = True

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                profile = user.get('profile', {})
                display_name = profile.get('first_name', username)
                if profile.get('last_name'):
                    display_name += f" {profile['last_name']}"

                success_message = f"Willkommen, {display_name}!"

                if is_ajax:
                    return JsonResponse({
                        'success': True,
                        'message': success_message,
                        'redirect_url': reverse('home')
                    })
                else:
                    messages.success(request, success_message)
                    return redirect('home')

            else:
                error_message = "Ung√ºltiger Benutzername oder Passwort"
                logger.warning(f"‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è '{username}'")

                if is_ajax:
                    return JsonResponse({'success': False, 'message': error_message})
                else:
                    messages.error(request, error_message)
                    form = LoginForm(request.POST)
                    return render(request, 'users/login_page.html', {'form': form})

        # GET –∑–∞–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        form = LoginForm()

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            user_manager = UserManager()
            admin_count = user_manager.get_admin_count()
        except Exception:
            admin_count = 0

        context = {
            'form': form,
            'admin_count': admin_count,
            'system_version': '1.0.0'
        }

        return render(request, 'users/login_page.html', context)

    except Exception as e:
        logger.exception(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ login_view: {e}")
        error_message = "Ein unerwarteter Fehler ist aufgetreten"

        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return JsonResponse({'success': False, 'message': error_message})
        else:
            messages.error(request, error_message)
            form = LoginForm()
            return render(request, 'users/login_page.html', {'form': form})


@require_http_methods(["GET", "POST"])
def logout_view(request):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        username = request.session.get('username', 'Unknown')
        logger.info(f"üö™ –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–µ—Å—Å–∏–∏
        user_display_name = None
        if 'user_data' in request.session:
            user_data = request.session['user_data']
            profile = user_data.get('profile', {})
            first_name = profile.get('first_name', '')
            if first_name:
                user_display_name = first_name
            else:
                user_display_name = username

        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        request.session.flush()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_display_name:
            message = f"Auf Wiedersehen, {user_display_name}! Sie wurden erfolgreich abgemeldet."
        else:
            message = "Sie wurden erfolgreich abgemeldet."

        messages.success(request, message)
        logger.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")

        return redirect('home')

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}")
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        request.session.flush()
        messages.info(request, "Sie wurden abgemeldet.")
        return redirect('home')


# ==================== –°–û–ó–î–ê–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ====================

def render_with_messages(request, template_name, context, success_redirect=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTMX"""
    is_htmx = request.headers.get('HX-Request') == 'true'

    if is_htmx:
        # –°–æ–∑–¥–∞–µ–º JSON –æ—Ç–≤–µ—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        storage = messages.get_messages(request)
        messages_list = []
        for message in storage:
            messages_list.append({
                'tags': message.tags,
                'text': str(message),
                'delay': 5000
            })

        response = JsonResponse({'messages': messages_list})
        response['Content-Type'] = 'application/json'

        if success_redirect:
            response['HX-Redirect'] = success_redirect
        return response
    else:
        if success_redirect:
            return redirect(success_redirect)
        return render(request, template_name, context)


@ratelimit(key='ip', rate='10/m', method='POST')
def create_admin_step1(request):
    """–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    logger.info("üöÄ === –í–•–û–î –í create_admin_step1 ===")

    if request.method == 'POST':
        logger.info("üì• POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

        form = CreateAdminUserForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']

            logger.info(f"‚úÖ –§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            user_manager = UserManager()
            existing_user = user_manager.find_user_by_username(username)

            if existing_user:
                error_msg = language.error_messages['user_exists']
                logger.error(f"‚ùå {error_msg}: {username}")
                messages.error(request, error_msg)

                context = {'form': form, 'text': language.text_create_admin_step1, 'step': 1}
                return render_with_messages(request, 'create_admin_step1.html', context)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
            request.session['admin_creation'] = {
                'username': username,
                'password': make_password(password),  # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                'step': 1,
                'created_at': datetime.datetime.now().isoformat()
            }
            request.session.modified = True

            success_msg = language.success_messages['step1_completed'].format(username=username)
            logger.success(f"‚úÖ {success_msg}")
            messages.success(request, success_msg)

            return render_with_messages(
                request,
                'create_admin_step1.html',
                {'form': form, 'text': language.text_create_admin_step1, 'step': 1},
                reverse('users:create_admin_step2')
            )
        else:
            logger.error(f"‚ùå –§–æ—Ä–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: {form.errors}")
            messages.error(request, language.validation_messages['form_invalid'])

    # GET –∑–∞–ø—Ä–æ—Å
    form = CreateAdminUserForm()
    context = {'form': form, 'text': language.text_create_admin_step1, 'step': 1}
    return render(request, 'create_admin_step1.html', context)


@ratelimit(key='ip', rate='10/m', method='POST')
def create_admin_step2(request):
    """–®–∞–≥ 2: –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    logger.info("üöÄ === –í–•–û–î –í create_admin_step2 ===")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —à–∞–≥–∞ 1
    admin_creation = request.session.get('admin_creation')
    if not admin_creation or admin_creation.get('step') != 1:
        logger.error("‚ùå –î–∞–Ω–Ω—ã–µ —à–∞–≥–∞ 1 –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        messages.error(request, language.error_messages['step_incomplete'])
        return redirect('users:create_admin_step1')

    username = admin_creation['username']
    logger.info(f"üìù –®–∞–≥ 2 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

    if request.method == 'POST':
        logger.info("üì• POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

        form = AdminProfileForm(request.POST)
        if form.is_valid():
            logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º—ã
            profile_data = {
                'salutation': form.cleaned_data['salutation'],
                'title': form.cleaned_data.get('title', ''),
                'first_name': form.cleaned_data['first_name'],
                'last_name': form.cleaned_data['last_name'],
                'email': form.cleaned_data['email'],
                'phone': form.cleaned_data['phone']
            }

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            additional_contacts_data = request.POST.get('additional_contacts_data', '[]')
            try:
                additional_contacts = json.loads(additional_contacts_data)
                logger.info(f"üìû –ü–æ–ª—É—á–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(additional_contacts)}")
            except json.JSONDecodeError:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
                additional_contacts = []

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            contacts = {
                'system_email': profile_data['email'],
                'system_phone': profile_data['phone'],
                'additional_contacts': additional_contacts
            }

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
            admin_creation.update({
                'profile': profile_data,
                'contacts': contacts,
                'step': 2,
                'updated_at': datetime.datetime.now().isoformat()
            })
            request.session['admin_creation'] = admin_creation
            request.session.modified = True

            contact_info = f"System-E-Mail, System-Telefon"
            if additional_contacts:
                contact_info += f" + {len(additional_contacts)} zus√§tzliche"

            success_msg = language.success_messages['step2_completed'].format(contact_info=contact_info)
            logger.success(f"‚úÖ {success_msg}")
            messages.success(request, success_msg)

            return render_with_messages(
                request,
                'create_admin_step2.html',
                {'form': form, 'text': language.text_create_admin_step2, 'step': 2, 'username': username},
                reverse('users:create_admin_step3')
            )
        else:
            logger.error(f"‚ùå –§–æ—Ä–º–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: {form.errors}")
            messages.error(request, language.validation_messages['form_invalid'])

    # GET –∑–∞–ø—Ä–æ—Å
    form = AdminProfileForm()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —à–∞–±–ª–æ–Ω
    contact_type_choices = get_communication_types_from_mongodb()
    communication_config = get_communication_config_from_mongodb()

    context = {
        'form': form,
        'text': language.text_create_admin_step2,
        'step': 2,
        'username': username,
        'contact_type_choices': contact_type_choices,
        'contact_type_choices_json': json.dumps([{'value': choice[0], 'text': choice[1]} for choice in contact_type_choices]),
        'communication_config': communication_config,
        'existing_additional_contacts': []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    }

    return render(request, 'create_admin_step2.html', context)


@ratelimit(key='ip', rate='5/m', method='POST')
def create_admin_step3(request):
    """–®–∞–≥ 3: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    logger.info("üöÄ === –í–•–û–î –í create_admin_step3 ===")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
    admin_creation = request.session.get('admin_creation')
    if not admin_creation or admin_creation.get('step') != 2:
        logger.error("‚ùå –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        messages.error(request, language.error_messages['step_incomplete'])
        return redirect('users:create_admin_step1')

    username = admin_creation['username']
    profile = admin_creation.get('profile', {})
    full_name = f"{profile.get('first_name', '')} {profile.get('last_name', '')}".strip()

    logger.info(f"üîê –®–∞–≥ 3 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} ({full_name})")

    if request.method == 'POST':
        logger.info("üì• POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

        form = AdminPermissionsForm(request.POST)
        if form.is_valid():
            logger.info("‚úÖ –§–æ—Ä–º–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤–∞–ª–∏–¥–Ω–∞")

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = {
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'username': admin_creation['username'],
                'password': admin_creation['password'],  # –£–∂–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π

                # –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'profile': admin_creation['profile'],

                # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'contacts': admin_creation['contacts'],

                # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                'is_admin': True,
                'is_active': True,
                'is_super_admin': form.cleaned_data.get('is_super_admin', True),
                'permissions': {
                    'can_manage_users': form.cleaned_data.get('can_manage_users', True),
                    'can_manage_database': form.cleaned_data.get('can_manage_database', True),
                    'can_view_logs': form.cleaned_data.get('can_view_logs', True),
                    'can_manage_settings': form.cleaned_data.get('can_manage_settings', True),
                },

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                'security': {
                    'password_expires': form.cleaned_data.get('password_expires', True),
                    'two_factor_required': form.cleaned_data.get('two_factor_required', True),
                },

                # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
                'created_at': datetime.datetime.now(),
                'modified_at': datetime.datetime.now(),
                'deleted': False,
                'last_login': None,
                'failed_login_attempts': 0,
                'locked_until': None,
                'password_changed_at': datetime.datetime.now()
            }

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_manager = UserManager()
            success = user_manager.create_user(user_data)

            if success:
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
                if 'admin_creation' in request.session:
                    del request.session['admin_creation']
                    request.session.modified = True

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                contacts_count = 2  # system email + phone
                additional_contacts = admin_creation.get('contacts', {}).get('additional_contacts', [])
                if additional_contacts:
                    contacts_count += len(additional_contacts)

                contact_info = f"{contacts_count} Kontakte insgesamt"
                success_msg = language.success_messages['admin_created'].format(
                    username=username,
                    contact_info=contact_info
                )

                logger.success(f"üéâ {success_msg}")
                messages.success(request, success_msg)

                return render_with_messages(
                    request,
                    'create_admin_step3.html',
                    {'form': form, 'text': language.text_create_admin_step3, 'step': 3, 'username': username, 'full_name': full_name},
                    reverse('home')
                )
            else:
                error_msg = language.error_messages['user_creation_error']
                logger.error(f"‚ùå {error_msg}")
                messages.error(request, error_msg)
        else:
            logger.error(f"‚ùå –§–æ—Ä–º–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: {form.errors}")
            messages.error(request, language.validation_messages['form_invalid'])

    # GET –∑–∞–ø—Ä–æ—Å
    form = AdminPermissionsForm()
    context = {
        'form': form,
        'text': language.text_create_admin_step3,
        'step': 3,
        'username': username,
        'full_name': full_name
    }

    return render(request, 'create_admin_step3.html', context)