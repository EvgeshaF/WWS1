# users/views.py - –û–ë–ù–û–í–õ–ï–ù –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WWS1.auth

from django.shortcuts import render, redirect
from django.contrib import messages
from django.http import JsonResponse
from django.urls import reverse
from django.contrib.auth.hashers import make_password
from django.views.decorators.http import require_http_methods
from django.views.decorators.cache import never_cache
from loguru import logger
import datetime
import json

# ‚úÖ –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ò–ó –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ì–û –ú–û–î–£–õ–Ø WWS1.auth
from auth import (
    authenticate_user,
    is_user_authenticated,
    clear_user_session,
    get_user_display_name,
    create_user_session,
    anonymous_required,
    login_required,
    admin_required,
)

from .forms import (
    LoginForm, CreateAdminUserForm, AdminProfileForm,
    AdminPermissionsForm, get_communication_types_from_mongodb,
    get_communication_config_from_mongodb
)
from .user_utils import UserManager
from . import language
from django_ratelimit.decorators import ratelimit


# ==================== –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ====================

@ratelimit(key='ip', rate='5/m', method='POST')
@require_http_methods(["GET"])
@anonymous_required(redirect_url='/')
def login_page_view(request):
    """–û—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    try:
        form = LoginForm()

        try:
            user_manager = UserManager()
            admin_count = user_manager.get_admin_count()
        except Exception:
            admin_count = 0

        context = {
            'form': form,
            'admin_count': admin_count,
            'system_version': '1.0.0'
        }

        return render(request, 'users/login_page.html', context)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ login_page_view: {e}")
        messages.error(request, "Ein Fehler ist aufgetreten")
        return redirect('home')


@require_http_methods(["GET", "POST"])
@never_cache
def login_view(request):
    """–§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AJAX"""
    try:
        if request.method == "POST":
            logger.info("üîê –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Ö–æ–¥–∞")

            is_ajax = request.headers.get('X-Requested-With') == 'XMLHttpRequest'

            username = request.POST.get("username", "").strip()
            password = request.POST.get("password", "")
            remember_me = request.POST.get("remember_me") == "on"

            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {username}, AJAX: {is_ajax}")

            if not username:
                error_message = "Benutzername ist erforderlich"
                if is_ajax:
                    return JsonResponse({'success': False, 'message': error_message})
                messages.error(request, error_message)
                form = LoginForm(request.POST)
                return render(request, 'users/login_page.html', {'form': form})

            if not password:
                error_message = "Passwort ist erforderlich"
                if is_ajax:
                    return JsonResponse({'success': False, 'message': error_message})
                messages.error(request, error_message)
                form = LoginForm(request.POST)
                return render(request, 'users/login_page.html', {'form': form})

            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú WWS1.auth
            user = authenticate_user(username, password)

            if user:
                logger.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

                # ‚úÖ –°–û–ó–î–ê–ï–ú –°–ï–°–°–ò–Æ —á–µ—Ä–µ–∑ WWS1.auth
                create_user_session(request, user, remember_me)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                display_name = get_user_display_name(user)
                success_message = f"Willkommen, {display_name}!"

                if is_ajax:
                    return JsonResponse({
                        'success': True,
                        'message': success_message,
                        'redirect_url': reverse('home')
                    })
                else:
                    messages.success(request, success_message)
                    return redirect('home')

            else:
                error_message = "Ung√ºltiger Benutzername oder Passwort"
                logger.warning(f"‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è '{username}'")

                if is_ajax:
                    return JsonResponse({'success': False, 'message': error_message})
                else:
                    messages.error(request, error_message)
                    form = LoginForm(request.POST)
                    return render(request, 'users/login_page.html', {'form': form})

        # GET –∑–∞–ø—Ä–æ—Å
        form = LoginForm()

        try:
            user_manager = UserManager()
            admin_count = user_manager.get_admin_count()
        except Exception:
            admin_count = 0

        context = {
            'form': form,
            'admin_count': admin_count,
            'system_version': '1.0.0'
        }

        return render(request, 'users/login_page.html', context)

    except Exception as e:
        logger.exception(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ login_view: {e}")
        error_message = "Ein unerwarteter Fehler ist aufgetreten"

        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return JsonResponse({'success': False, 'message': error_message})
        else:
            messages.error(request, error_message)
            form = LoginForm()
            return render(request, 'users/login_page.html', {'form': form})


@require_http_methods(["GET", "POST"])
def logout_view(request):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        username = request.session.get('username', 'Unknown')
        logger.info(f"üö™ –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        user_display_name = None
        if 'user_data' in request.session:
            user_data = request.session['user_data']
            user_display_name = get_user_display_name(user_data)

        # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú WWS1.auth –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        clear_user_session(request)

        # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
        request.session.flush()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_display_name:
            message = f"Auf Wiedersehen, {user_display_name}! Sie wurden erfolgreich abgemeldet."
        else:
            message = "Sie wurden erfolgreich abgemeldet."

        messages.success(request, message)
        logger.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")

        return redirect('home')

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}")
        request.session.flush()
        messages.info(request, "Sie wurden abgemeldet.")
        return redirect('home')


# ==================== –ü–†–ò–ú–ï–†–´ –ó–ê–©–ò–©–ï–ù–ù–´–• VIEWS ====================

@login_required
def user_profile(request):
    """
    –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    request.current_user –¥–æ–±–∞–≤–ª–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @login_required
    """
    user_data = request.current_user

    context = {
        'user_data': user_data,
        'display_name': get_user_display_name(user_data)
    }

    return render(request, 'users/profile.html', context)


@admin_required
def admin_panel(request):
    """
    –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
    request.current_user –¥–æ–±–∞–≤–ª–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
    """
    user_data = request.current_user

    context = {
        'user_data': user_data,
        'is_super_admin': user_data.get('is_super_admin', False)
    }

    return render(request, 'users/admin_panel.html', context)

# ==================== –°–û–ó–î–ê–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ====================
# (–ö–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)